ARM GAS  /tmp/cc9qRquU.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32l1xx_hal_flash_ex.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	FLASH_OB_GetUser:
  25              	.LFB88:
  26              		.file 1 "Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c"
   1:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
   2:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ******************************************************************************
   3:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @file    stm32l1xx_hal_flash_ex.c
   4:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief   Extended FLASH HAL module driver.
   6:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *    
   7:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *          This file provides firmware functions to manage the following 
   8:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *          functionalities of the internal FLASH memory:
   9:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + FLASH Interface configuration
  10:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + FLASH Memory Erasing
  11:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + DATA EEPROM Programming/Erasing
  12:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + Option Bytes Programming
  13:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + Interrupts management
  14:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *    
  15:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   @verbatim
  16:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
  17:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                ##### Flash peripheral Extended features  #####
  18:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
  19:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****            
  20:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   [..] Comparing to other products, the FLASH interface for STM32L1xx
  21:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        devices contains the following additional features        
  22:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) Erase functions
  23:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) DATA_EEPROM memory management
  24:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) BOOT option bit configuration       
  25:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) PCROP protection for all sectors
  26:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
  27:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                       ##### How to use this driver #####
  28:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
  29:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   [..] This driver provides functions to configure and program the FLASH memory 
  30:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        of all STM32L1xx. It includes:
  31:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) Full DATA_EEPROM erase and program management
  32:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) Boot activation
ARM GAS  /tmp/cc9qRquU.s 			page 2


  33:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) PCROP protection configuration and control for all pages
  34:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
  35:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   @endverbatim
  36:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ******************************************************************************
  37:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @attention
  38:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *
  39:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  40:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * All rights reserved.</center></h2>
  41:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *
  42:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  43:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * the "License"; You may not use this file except in compliance with the
  44:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * License. You may obtain a copy of the License at:
  45:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  46:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *
  47:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ******************************************************************************
  48:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */ 
  49:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  50:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Includes ------------------------------------------------------------------*/
  51:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #include "stm32l1xx_hal.h"
  52:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  53:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup STM32L1xx_HAL_Driver
  54:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
  55:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  56:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  57:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  58:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASH
  59:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
  60:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  61:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASH_Private_Variables
  62:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
  63:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
  64:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Variables used for Erase pages under interruption*/
  65:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** extern FLASH_ProcessTypeDef pFlash;
  66:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
  67:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
  68:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  69:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  70:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
  71:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
  72:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  73:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
  74:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx FLASHEx
  75:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief FLASH HAL Extension module driver
  76:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
  77:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  78:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  79:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private typedef -----------------------------------------------------------*/
  80:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private define ------------------------------------------------------------*/
  81:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Constants FLASHEx Private Constants
  82:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
  83:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
  84:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
  85:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
  86:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  87:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  88:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private macro -------------------------------------------------------------*/
  89:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Macros FLASHEx Private Macros
ARM GAS  /tmp/cc9qRquU.s 			page 3


  90:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
  91:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  92:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
  93:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
  94:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */ 
  95:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  96:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private variables ---------------------------------------------------------*/
  97:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private function prototypes -----------------------------------------------*/
  98:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Functions FLASHEx Private Functions
  99:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
 100:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
 101:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void                      FLASH_PageErase(uint32_t PageAddress);
 102:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_WRPConfig(FLASH_OBProgramInitTypeDef *pOBInit, FunctionalState N
 103:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void               FLASH_OB_WRPConfigWRP1OrPCROP1(uint32_t WRP1OrPCROP1, FunctionalState New
 104:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)   
 105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA)
 106:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD) 
 107:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)
 108:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void               FLASH_OB_WRPConfigWRP2OrPCROP2(uint32_t WRP2OrPCROP2, FunctionalState New
 109:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || (...) || STM32L151xE || STM32L152xE || STM32
 110:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) 
 111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  
 112:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xE)
 113:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void               FLASH_OB_WRPConfigWRP3(uint32_t WRP3, FunctionalState NewState);
 114:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD || STM32L151xE || STM32L152xE || STM32L162xE */
 115:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
 116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xDX) || defined(STM32L162xDX)
 117:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void               FLASH_OB_WRPConfigWRP4(uint32_t WRP4, FunctionalState NewState);
 118:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xE || STM32L152xE || STM32L151xDX || ... */
 119:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 120:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_PCROPConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit, Functiona
 121:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD */
 122:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_nRST_BFB2)
 123:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BootConfig(uint8_t OB_BOOT);
 124:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_nRST_BFB2 */
 125:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_RDPConfig(uint8_t OB_RDP);
 126:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY);
 127:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BORConfig(uint8_t OB_BOR);
 128:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetRDP(void);
 129:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetUser(void);
 130:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetBOR(void);
 131:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data);
 132:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data);
 133:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data);
 134:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data);
 135:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data);
 136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data);
 137:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 138:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 139:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 140:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 141:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Exported functions ---------------------------------------------------------*/
 142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions FLASHEx Exported Functions
 143:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
 144:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 145:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 146:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group1 FLASHEx Memory Erasing functions
ARM GAS  /tmp/cc9qRquU.s 			page 4


 147:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *  @brief   FLASH Memory Erasing functions
 148:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *
 149:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @verbatim   
 150:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
 151:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                 ##### FLASH Erasing Programming functions ##### 
 152:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
 153:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 154:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] The FLASH Memory Erasing functions, includes the following functions:
 155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (+) @ref HAL_FLASHEx_Erase: return only when erase has been done
 156:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (+) @ref HAL_FLASHEx_Erase_IT: end of erase is done when @ref HAL_FLASH_EndOfOperationCallback 
 157:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         is called with parameter 0xFFFFFFFF
 158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 159:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] Any operation of erase should follow these steps:
 160:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_Unlock() function to enable the flash control register and 
 161:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         program memory access.
 162:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the desired function to erase page.
 163:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_Lock() to disable the flash program memory access 
 164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (recommended to protect the FLASH memory against possible unwanted operation).
 165:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 166:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @endverbatim
 167:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
 168:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 169:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 170:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 171:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory Pages 
 172:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
 173:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 174:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
 175:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 176:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   For STM32L151xDX/STM32L152xDX/STM32L162xDX, as memory is not continuous between
 177:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         2 banks, user should perform pages erase by bank only.
 178:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param[in]  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
 179:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 180:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 181:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param[out]  PageError pointer to variable  that
 182:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information on faulty page in case of error
 183:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         (0xFFFFFFFF means that all the pages have been correctly erased)
 184:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 185:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 186:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 187:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
 188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 189:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 190:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t address = 0U;
 191:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 192:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Locked */
 193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 194:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 195:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 196:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 197:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 198:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (status == HAL_OK)
 199:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 200:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /*Initialization of PageError variable*/
 201:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *PageError = 0xFFFFFFFFU;
 202:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 203:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Check the parameters */
ARM GAS  /tmp/cc9qRquU.s 			page 5


 204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_NBPAGES(pEraseInit->NbPages));
 205:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 206:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 207:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEr
 208:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 209:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xDX) || defined(STM32L152xDX) || defined(STM32L162xDX)
 210:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Check on which bank belongs the 1st address to erase */
 211:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pEraseInit->PageAddress < FLASH_BANK2_BASE)
 212:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 213:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* BANK1 */
 214:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Check that last page to erase still belongs to BANK1 */
 215:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_S
 216:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 217:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /*  Last page does not belong to BANK1, erase procedure cannot be performed because memory 
 218:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             continuous */
 219:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* Process Unlocked */
 220:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         __HAL_UNLOCK(&pFlash);
 221:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return HAL_ERROR;
 222:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 223:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 224:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 225:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 226:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* BANK2 */
 227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Check that last page to erase still belongs to BANK2 */
 228:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_S
 229:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 230:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /*  Last page does not belong to BANK2, erase procedure cannot be performed because memory 
 231:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             continuous */
 232:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* Process Unlocked */
 233:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         __HAL_UNLOCK(&pFlash);
 234:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return HAL_ERROR;
 235:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 236:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 237:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */
 238:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 239:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Erase page by page to be done*/
 240:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     for(address = pEraseInit->PageAddress; 
 241:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 242:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address += FLASH_PAGE_SIZE)
 243:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 244:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_PageErase(address);
 245:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 246:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 247:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 248:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 249:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* If the erase operation is completed, disable the ERASE Bit */
 250:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 251:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 252:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 253:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK) 
 254:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 255:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* In case of error, stop erase procedure and return the faulty address */
 256:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         *PageError = address;
 257:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         break;
 258:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 259:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 260:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
ARM GAS  /tmp/cc9qRquU.s 			page 6


 261:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 262:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Unlocked */
 263:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 264:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 265:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 266:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 267:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 268:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 269:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Perform a page erase of the specified FLASH memory pages  with interrupt enabled
 270:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
 271:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 272:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
 273:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 274:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *          End of erase is done when @ref HAL_FLASH_EndOfOperationCallback is called with paramet
 275:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *          0xFFFFFFFF
 276:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   For STM32L151xDX/STM32L152xDX/STM32L162xDX, as memory is not continuous between
 277:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         2 banks, user should perform pages erase by bank only.
 278:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
 279:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 280:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 281:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 282:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 283:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
 284:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 285:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 286:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 287:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* If procedure already ongoing, reject the next one */
 288:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 289:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 290:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     return HAL_ERROR;
 291:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 292:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 293:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 294:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_NBPAGES(pEraseInit->NbPages));
 295:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 296:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 297:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEras
 298:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 299:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Locked */
 300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 301:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 302:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xDX) || defined(STM32L152xDX) || defined(STM32L162xDX)
 303:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Check on which bank belongs the 1st address to erase */
 304:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pEraseInit->PageAddress < FLASH_BANK2_BASE)
 305:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 306:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* BANK1 */
 307:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Check that last page to erase still belongs to BANK1 */
 308:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_S
 309:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 310:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /*  Last page does not belong to BANK1, erase procedure cannot be performed because memory 
 311:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             continuous */
 312:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* Process Unlocked */
 313:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         __HAL_UNLOCK(&pFlash);
 314:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return HAL_ERROR;
 315:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 316:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 317:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
ARM GAS  /tmp/cc9qRquU.s 			page 7


 318:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 319:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* BANK2 */
 320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Check that last page to erase still belongs to BANK2 */
 321:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_S
 322:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 323:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /*  Last page does not belong to BANK2, erase procedure cannot be performed because memory 
 324:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             continuous */
 325:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* Process Unlocked */
 326:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         __HAL_UNLOCK(&pFlash);
 327:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return HAL_ERROR;
 328:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 329:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 330:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */
 331:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 332:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 333:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 334:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 335:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (status == HAL_OK)
 336:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 337:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Enable End of FLASH Operation and Error source interrupts */
 338:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 339:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 340:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 341:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.NbPagesToErase = pEraseInit->NbPages;
 342:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.Page = pEraseInit->PageAddress;
 343:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 344:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /*Erase 1st page and wait for IT*/
 345:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     FLASH_PageErase(pEraseInit->PageAddress);
 346:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 347:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
 348:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 349:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Process Unlocked */
 350:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     __HAL_UNLOCK(&pFlash);
 351:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 352:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 353:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 354:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 355:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 356:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 357:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 358:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 359:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 360:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group2 Option Bytes Programming functions
 361:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *  @brief   Option Bytes Programming functions
 362:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *
 363:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @verbatim   
 364:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
 365:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                 ##### Option Bytes Programming functions ##### 
 366:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================  
 367:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 368:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] Any operation of erase or program should follow these steps:
 369:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_OB_Unlock() function to enable the Flash option control 
 370:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         register access.
 371:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call following function to program the desired option bytes.
 372:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         (++) @ref HAL_FLASHEx_OBProgram:
 373:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****          - To Enable/Disable the desired sector write protection.
 374:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****          - To set the desired read Protection Level.
ARM GAS  /tmp/cc9qRquU.s 			page 8


 375:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****          - To configure the user option Bytes: IWDG, STOP and the Standby.
 376:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****          - To Set the BOR level.
 377:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Once all needed option bytes to be programmed are correctly written, call the
 378:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         @ref HAL_FLASH_OB_Launch(void) function to launch the Option Bytes programming process.
 379:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_OB_Lock() to disable the Flash option control register access (reco
 380:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         to protect the option Bytes against possible unwanted operations).
 381:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 382:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] Proprietary code Read Out Protection (PcROP):
 383:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) The PcROP sector is selected by using the same option bytes as the Write
 384:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         protection (nWRPi bits). As a result, these 2 options are exclusive each other.
 385:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) In order to activate the PcROP (change the function of the nWRPi option bits), 
 386:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         the SPRMOD option bit must be activated.
 387:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) The active value of nWRPi bits is inverted when PCROP mode is active, this
 388:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         means: if SPRMOD = 1 and nWRPi = 1 (default value), then the user sector "i"
 389:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         is read/write protected.
 390:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) To activate PCROP mode for Flash sector(s), you need to call the following function:
 391:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         (++) @ref HAL_FLASHEx_AdvOBProgram in selecting sectors to be read/write protected
 392:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         (++) @ref HAL_FLASHEx_OB_SelectPCROP to enable the read/write protection
 393:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) PcROP is available only in STM32L151xBA, STM32L152xBA, STM32L151xC, STM32L152xC & STM32L162
 394:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 395:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @endverbatim
 396:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
 397:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 398:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 399:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 400:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Program option bytes
 401:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
 402:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 403:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 404:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 405:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 406:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
 407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 408:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 409:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 410:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Locked */
 411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 412:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 413:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 414:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 415:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 416:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Write protection configuration*/
 417:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 418:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 419:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_WRPSTATE(pOBInit->WRPState));
 420:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 421:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 422:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Enable of Write protection on the selected Sector*/
 423:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_OB_WRPConfig(pOBInit, ENABLE);
 424:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 425:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 426:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 427:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Disable of Write protection on the selected Sector*/
 428:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_OB_WRPConfig(pOBInit, DISABLE);
 429:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
ARM GAS  /tmp/cc9qRquU.s 			page 9


 432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
 433:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 434:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 435:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 436:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 437:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 438:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Read protection configuration*/
 439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 440:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 441:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 442:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 443:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 444:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
 445:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 446:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 447:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 448:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 449:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 450:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* USER  configuration*/
 451:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 452:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 453:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 454:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STOP_NORST,
 455:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STDBY_NORST);
 456:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 457:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 458:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
 459:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 460:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 461:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 462:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 463:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 464:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* BOR Level  configuration*/
 465:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 466:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 467:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 468:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 469:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 470:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
 471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 473:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 475:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Unlocked */
 476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 477:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 479:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 480:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 481:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 482:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief   Get the Option byte configuration
 483:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
 484:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 485:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 486:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
 487:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 488:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
ARM GAS  /tmp/cc9qRquU.s 			page 10


 489:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 490:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 491:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 492:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get WRP1*/
 493:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->WRPSector0To31 = (uint32_t)(FLASH->WRPR1);
 494:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 495:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)   
 496:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA)
 497:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD) 
 498:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)
 499:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 500:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get WRP2*/
 501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->WRPSector32To63 = (uint32_t)(FLASH->WRPR2);
 502:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 503:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || (...) || STM32L151xE || STM32L152xE || STM32
 504:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 505:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) 
 506:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  
 507:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xE)
 508:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 509:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get WRP3*/
 510:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->WRPSector64To95 = (uint32_t)(FLASH->WRPR3);
 511:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 512:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD || STM32L151xE || STM32L152xE || STM32L162xE */
 513:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 514:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
 515:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xDX) || defined(STM32L162xDX)
 516:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 517:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get WRP4*/
 518:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->WRPSector96To127 = (uint32_t)(FLASH->WRPR4);
 519:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 520:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xE || STM32L152xE || STM32L162xE || STM32L151xDX || ... */
 521:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 522:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get RDP Level*/
 523:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->RDPLevel   = FLASH_OB_GetRDP();
 524:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 525:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get USER*/
 526:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->USERConfig = FLASH_OB_GetUser();
 527:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 528:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get BOR Level*/
 529:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->BORLevel   = FLASH_OB_GetBOR();
 530:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 531:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 532:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD) || defined(FLASH_OBR_nRST_BFB2)
 533:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 534:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 535:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Program option bytes
 536:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat2 & Cat3 devices for PCROP and Cat4 & Cat5 for BF
 537:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pAdvOBInit pointer to an FLASH_AdvOBProgramInitTypeDef structure that
 538:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 539:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 540:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 541:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 542:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
 543:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 544:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 545:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
ARM GAS  /tmp/cc9qRquU.s 			page 11


 546:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 547:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OBEX(pAdvOBInit->OptionType));
 548:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 549:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 550:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 551:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Program PCROP option byte*/
 552:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if ((pAdvOBInit->OptionType & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 554:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Check the parameters */
 555:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
 556:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pAdvOBInit->PCROPState == OB_PCROP_STATE_ENABLE)
 557:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 558:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /*Enable of Write protection on the selected Sector*/
 559:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_OB_PCROPConfig(pAdvOBInit, ENABLE);
 560:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK)
 561:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 562:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return status;
 563:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 564:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 565:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 566:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 567:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Disable of Write protection on the selected Sector*/ 
 568:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_OB_PCROPConfig(pAdvOBInit, DISABLE);
 569:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK)
 570:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 571:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return status;
 572:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 573:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 574:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 575:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 576:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD */
 577:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 578:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_nRST_BFB2)
 579:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 580:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Program BOOT config option byte */
 581:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if ((pAdvOBInit->OptionType & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 582:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 583:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 584:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 585:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 586:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_nRST_BFB2 */
 587:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 588:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 589:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 590:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 591:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 592:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Get the OBEX byte configuration
 593:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat2  & Cat3 devices for PCROP and Cat4 & Cat5 for B
 594:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pAdvOBInit pointer to an FLASH_AdvOBProgramInitTypeDef structure that
 595:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 596:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 597:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
 598:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 599:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
 600:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 601:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->OptionType = 0U;
 602:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
ARM GAS  /tmp/cc9qRquU.s 			page 12


 603:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 604:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       
 605:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->OptionType |= OPTIONBYTE_PCROP;
 606:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 607:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get PCROP state */
 608:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->PCROPState = (FLASH->OBR & FLASH_OBR_SPRMOD) >> POSITION_VAL(FLASH_OBR_SPRMOD);
 609:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 610:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get PCROP protected sector from 0 to 31 */
 611:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->PCROPSector0To31 = FLASH->WRPR1;
 612:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 613:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)
 614:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 615:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get PCROP protected sector from 32 to 63 */
 616:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->PCROPSector32To63 = FLASH->WRPR2;
 617:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 618:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC */
 619:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD */
 620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 621:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_nRST_BFB2)
 622:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       
 623:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->OptionType |= OPTIONBYTE_BOOTCONFIG;
 624:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 625:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Get Boot config OB */
 626:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->BootConfig = (FLASH->OBR & FLASH_OBR_nRST_BFB2) >> 16U;
 627:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 628:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_nRST_BFB2 */
 629:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 630:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 631:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD || FLASH_OBR_nRST_BFB2 */
 632:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 633:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 634:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 635:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 636:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Select the Protection Mode (SPRMOD).
 637:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32L151xBA, STM32L152xBA, STM32L151xC, STM32L152xC
 638:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   Once SPRMOD bit is active, unprotection of a protected sector is not possible 
 639:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
 640:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
 641:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 642:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
 643:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 644:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 645:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint16_t tmp1 = 0U;
 646:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp2 = 0U;
 647:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint8_t optiontmp = 0U;
 648:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint16_t optiontmp2 = 0U;
 649:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 650:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 651:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 652:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Mask RDP Byte */
 653:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   optiontmp =  (uint8_t)(*(__IO uint8_t *)(OB_BASE)); 
 654:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 655:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Update Option Byte */
 656:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   optiontmp2 = (uint16_t)(OB_PCROP_SELECTED | optiontmp); 
 657:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 658:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* calculate the option byte to write */
 659:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = (uint16_t)(~(optiontmp2 ));
ARM GAS  /tmp/cc9qRquU.s 			page 13


 660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 661:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 662:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 663:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {         
 664:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
 665:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 666:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 667:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* program PCRop */
 668:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->RDP = tmp2;
 669:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 670:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 671:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 672:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 673:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 674:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Read protection operation Status */
 675:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;            
 676:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 677:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 678:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 679:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Deselect the Protection Mode (SPRMOD).
 680:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32L151xBA, STM32L152xBA, STM32L151xC, STM32L152xC
 681:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   Once SPRMOD bit is active, unprotection of a protected sector is not possible 
 682:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
 683:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
 684:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 685:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
 686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 687:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 688:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint16_t tmp1 = 0U;
 689:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp2 = 0U;
 690:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint8_t optiontmp = 0U;
 691:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint16_t optiontmp2 = 0U;
 692:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 693:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 694:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 695:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Mask RDP Byte */
 696:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   optiontmp =  (uint8_t)(*(__IO uint8_t *)(OB_BASE)); 
 697:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 698:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Update Option Byte */
 699:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   optiontmp2 = (uint16_t)(OB_PCROP_DESELECTED | optiontmp); 
 700:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 701:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* calculate the option byte to write */
 702:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = (uint16_t)(~(optiontmp2 ));
 703:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 704:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 705:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 706:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {         
 707:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
 708:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 709:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 710:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* program PCRop */
 711:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->RDP = tmp2;
 712:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 713:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 714:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 715:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 716:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
ARM GAS  /tmp/cc9qRquU.s 			page 14


 717:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Read protection operation Status */
 718:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;            
 719:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 720:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 721:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD */
 722:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 723:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 724:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 725:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 726:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 727:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group3 DATA EEPROM Programming functions
 728:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *  @brief   DATA EEPROM Programming functions
 729:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *
 730:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @verbatim   
 731:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  ===============================================================================
 732:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                      ##### DATA EEPROM Programming functions ##### 
 733:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  ===============================================================================  
 734:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  
 735:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] Any operation of erase or program should follow these steps:
 736:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASHEx_DATAEEPROM_Unlock() function to enable the data EEPROM access
 737:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         and Flash program erase control register access.
 738:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the desired function to erase or program data.
 739:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASHEx_DATAEEPROM_Lock() to disable the data EEPROM access
 740:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         and Flash program erase control register access(recommended
 741:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         to protect the DATA_EEPROM against possible unwanted operation).
 742:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 743:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @endverbatim
 744:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
 745:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 746:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 747:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 748:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Unlocks the data memory and FLASH_PECR register access.
 749:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 750:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 751:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
 752:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 753:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 754:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
 755:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Unlocking the Data memory and FLASH_PECR register access*/
 756:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     FLASH->PEKEYR = FLASH_PEKEY1;
 757:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     FLASH->PEKEYR = FLASH_PEKEY2;
 758:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 759:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
 760:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 761:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     return HAL_ERROR;
 762:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 763:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return HAL_OK;  
 764:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 765:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 766:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 767:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Locks the Data memory and FLASH_PECR register access.
 768:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 769:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 770:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
 771:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 772:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
 773:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
ARM GAS  /tmp/cc9qRquU.s 			page 15


 774:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 775:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return HAL_OK;
 776:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 777:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 778:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 779:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Erase a word in data memory.
 780:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be erased.
 781:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  TypeErase  Indicate the way to erase at a specified address.
 782:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         This parameter can be a value of @ref FLASH_Type_Program
 783:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASHEx_DATAEEPROM_Unlock() function
 784:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 785:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASHEx_DATAEEPROM_Lock() to the data EEPROM access
 786:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         and Flash program erase control register access(recommended to protect 
 787:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         the DATA_EEPROM against possible unwanted operation).
 788:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 789:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 790:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
 791:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 792:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 793:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 794:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 795:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_TYPEPROGRAMDATA(TypeErase));
 796:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
 797:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 798:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 799:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 801:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 802:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 803:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
 804:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 805:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 806:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 807:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 808:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Write 00000000h to valid address in the data memory */
 809:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint32_t *) Address = 0x00000000U;
 810:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 811:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 812:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 813:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 814:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Write 0000h to valid address in the data memory */
 815:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint16_t *) Address = (uint16_t)0x0000;
 816:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 817:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 818:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 819:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 820:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Write 00h to valid address in the data memory */
 821:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint8_t *) Address = (uint8_t)0x00;
 822:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 823:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 824:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 825:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 826:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
 827:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the erase status */
 828:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 829:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }  
 830:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cc9qRquU.s 			page 16


 831:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 832:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Program word at a specified address
 833:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASHEx_DATAEEPROM_Unlock() function
 834:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 835:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASHEx_DATAEEPROM_Unlock() to he data EEPROM access
 836:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         and Flash program erase control register access(recommended to protect 
 837:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         the DATA_EEPROM against possible unwanted operation).
 838:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   The function @ref HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram() can be called before 
 839:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         this function to configure the Fixed Time Programming.
 840:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 841:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         This parameter can be a value of @ref FLASHEx_Type_Program_Data
 842:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address  specifie the address to be programmed.
 843:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data     specifie the data to be programmed
 844:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 845:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 846:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 847:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 848:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t
 849:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 850:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 851:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 852:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Locked */
 853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 854:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 855:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 856:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
 857:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 858:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 859:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 860:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 861:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 862:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 863:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
 864:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 865:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 866:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 867:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 868:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program word (32-bit) at a specified address.*/
 869:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 870:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 871:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 872:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 873:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program halfword (16-bit) at a specified address.*/
 874:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 875:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 876:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 877:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 878:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program byte (8-bit) at a specified address.*/
 879:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 880:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 881:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 882:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 883:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /*Program word (8-bit) at a specified address.*/
 884:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 885:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 886:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 887:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
ARM GAS  /tmp/cc9qRquU.s 			page 17


 888:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program halfword (16-bit) at a specified address.*/
 889:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 890:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }    
 891:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 892:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 893:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program word (32-bit) at a specified address.*/
 894:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 895:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 896:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 897:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 898:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_ERROR;
 899:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 900:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 901:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 902:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 903:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Unlocked */
 904:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 905:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 906:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 907:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 908:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 909:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 910:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enable DATA EEPROM fixed Time programming (2*Tprog).
 911:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
 912:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 913:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram(void)
 914:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 915:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 916:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 917:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 918:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 919:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Disables DATA EEPROM fixed Time programming (2*Tprog).
 920:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
 921:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 922:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram(void)
 923:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 924:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 925:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 926:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 927:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 928:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 929:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 930:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 931:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 932:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 933:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 934:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 935:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Functions
 936:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
 937:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
 938:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 939:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /*
 940:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** ==============================================================================
 941:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****               OPTIONS BYTES
 942:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** ==============================================================================
 943:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** */
 944:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
ARM GAS  /tmp/cc9qRquU.s 			page 18


 945:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enables or disables the read out protection.
 946:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASH_OB_Unlock() function
 947:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 948:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_RDP specifies the read protection level. 
 949:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be:
 950:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_RDP_LEVEL_0 No protection
 951:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
 952:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_RDP_LEVEL_2 Chip protection
 953:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 954:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *  !!!Warning!!! When enabling OB_RDP_LEVEL_2 it's no more possible to go back to level 1 or 0
 955:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   
 956:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
 957:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 958:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint8_t OB_RDP)
 959:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 960:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 961:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
 962:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 963:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 964:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_RDP(OB_RDP));
 965:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 966:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = (uint32_t)(OB->RDP & FLASH_OBR_RDPRT);
 967:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 968:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* According to errata sheet, DocID022054 Rev 5, par2.1.5
 969:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   Before setting Level0 in the RDP register, check that the current level is not equal to Level0.
 970:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   If the current level is not equal to Level0, Level0 can be activated.
 971:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   If the current level is Level0 then the RDP register must not be written again with Level0. */
 972:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 973:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if ((tmp1 == OB_RDP_LEVEL_0) && (OB_RDP == OB_RDP_LEVEL_0))
 974:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 975:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /*current level is Level0 then the RDP register must not be written again with Level0. */
 976:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = HAL_ERROR;
 977:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 978:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else 
 979:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 980:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 981:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Mask SPRMOD bit */
 982:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp3 = (uint32_t)(OB->RDP & FLASH_OBR_SPRMOD);
 983:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif
 984:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 985:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* calculate the option byte to write */
 986:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 987:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 988:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 989:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 990:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 991:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 992:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(status == HAL_OK)
 993:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 994:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Clean the error context */
 995:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 996:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 997:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* program read protection level */
 998:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       OB->RDP = tmp2;
 999:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1000:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1001:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
ARM GAS  /tmp/cc9qRquU.s 			page 19


1002:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1003:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1004:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1005:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Read protection operation Status */
1006:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1007:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1008:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1009:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1010:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Programs the FLASH brownout reset threshold level Option Byte.
1011:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_BOR Selects the brownout reset threshold level.
1012:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1013:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_OFF BOR is disabled at power down, the reset is asserted when the VDD 
1014:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *                      power supply reaches the PDR(Power Down Reset) threshold (1.5V)
1015:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL1 BOR Reset threshold levels for 1.7V - 1.8V VDD power supply
1016:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL2 BOR Reset threshold levels for 1.9V - 2.0V VDD power supply
1017:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL3 BOR Reset threshold levels for 2.3V - 2.4V VDD power supply
1018:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL4 BOR Reset threshold levels for 2.55V - 2.65V VDD power supply
1019:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL5 BOR Reset threshold levels for 2.8V - 2.9V VDD power supply
1020:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1021:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1022:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BORConfig(uint8_t OB_BOR)
1023:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1024:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1025:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmp1 = 0U;
1026:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1027:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1028:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_BOR_LEVEL(OB_BOR));
1029:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1030:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Get the User Option byte register */
1031:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = OB->USER & ((~FLASH_OBR_BOR_LEV) >> 16U);
1032:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1033:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Calculate the option byte to write - [0xFFU | nUSER | 0x00U | USER]*/
1034:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
1035:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp |= (OB_BOR | tmp1);
1036:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1037:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1038:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1039:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1040:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1041:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
1042:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1043:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1044:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1045:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Write the BOR Option Byte */            
1046:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->USER = tmp;
1047:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1048:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1049:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1050:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1051:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1052:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Option Byte BOR Programming Status */
1053:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1054:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1055:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1056:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1057:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Returns the FLASH User Option Bytes values.
1058:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval The FLASH User Option Bytes.
ARM GAS  /tmp/cc9qRquU.s 			page 20


1059:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1060:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetUser(void)
1061:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
  27              		.loc 1 1061 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
1062:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the User Option Byte */
1063:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return (uint8_t)((FLASH->OBR & (FLASH_OBR_IWDG_SW | FLASH_OBR_nRST_STOP | FLASH_OBR_nRST_STDBY)) 
  32              		.loc 1 1063 0
  33 0000 024B     		ldr	r3, .L2
  34 0002 D869     		ldr	r0, [r3, #28]
  35 0004 000C     		lsrs	r0, r0, #16
1064:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
  36              		.loc 1 1064 0
  37 0006 00F07000 		and	r0, r0, #112
  38 000a 7047     		bx	lr
  39              	.L3:
  40              		.align	2
  41              	.L2:
  42 000c 003C0240 		.word	1073888256
  43              		.cfi_endproc
  44              	.LFE88:
  46              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
  47              		.align	2
  48              		.thumb
  49              		.thumb_func
  51              	FLASH_OB_GetRDP:
  52              	.LFB89:
1065:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1066:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1067:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Read Protection level.
1068:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval FLASH RDP level
1069:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         This parameter can be one of the following values:
1070:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_0 No protection
1071:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
1072:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
1073:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1074:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetRDP(void)
1075:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
  53              		.loc 1 1075 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
1076:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint8_t rdp_level = (uint8_t)(FLASH->OBR & FLASH_OBR_RDPRT);
  58              		.loc 1 1076 0
  59 0000 044B     		ldr	r3, .L8
  60 0002 D869     		ldr	r0, [r3, #28]
  61 0004 C0B2     		uxtb	r0, r0
  62              	.LVL0:
1077:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1078:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
  63              		.loc 1 1078 0
  64 0006 AA28     		cmp	r0, #170
  65 0008 02D0     		beq	.L5
ARM GAS  /tmp/cc9qRquU.s 			page 21


  66              		.loc 1 1078 0 is_stmt 0 discriminator 1
  67 000a CC28     		cmp	r0, #204
  68 000c 00D0     		beq	.L5
1079:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1080:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     return (OB_RDP_LEVEL_1);
  69              		.loc 1 1080 0 is_stmt 1
  70 000e BB20     		movs	r0, #187
  71              	.LVL1:
  72              	.L5:
1081:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1082:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1083:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1084:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     return (rdp_level);
1085:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1086:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
  73              		.loc 1 1086 0
  74 0010 7047     		bx	lr
  75              	.L9:
  76 0012 00BF     		.align	2
  77              	.L8:
  78 0014 003C0240 		.word	1073888256
  79              		.cfi_endproc
  80              	.LFE89:
  82              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
  83              		.align	2
  84              		.thumb
  85              		.thumb_func
  87              	FLASH_OB_GetBOR:
  88              	.LFB90:
1087:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1088:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1089:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Returns the FLASH BOR level.
1090:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval The BOR level Option Bytes.
1091:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1092:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetBOR(void)
1093:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
  89              		.loc 1 1093 0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
1094:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the BOR level */
1095:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return (uint8_t)((FLASH->OBR & (uint32_t)FLASH_OBR_BOR_LEV) >> 16U);
  94              		.loc 1 1095 0
  95 0000 024B     		ldr	r3, .L11
  96 0002 D869     		ldr	r0, [r3, #28]
1096:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
  97              		.loc 1 1096 0
  98 0004 C0F30340 		ubfx	r0, r0, #16, #4
  99 0008 7047     		bx	lr
 100              	.L12:
 101 000a 00BF     		.align	2
 102              	.L11:
 103 000c 003C0240 		.word	1073888256
 104              		.cfi_endproc
 105              	.LFE90:
 107              		.section	.text.FLASH_OB_WRPConfigWRP1OrPCROP1,"ax",%progbits
ARM GAS  /tmp/cc9qRquU.s 			page 22


 108              		.align	2
 109              		.thumb
 110              		.thumb_func
 112              	FLASH_OB_WRPConfigWRP1OrPCROP1:
 113              	.LFB93:
1097:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1098:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1099:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Write protects the desired pages of the first 64KB of the Flash.
1100:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
1101:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains WRP parameters.
1102:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Wtite protection.
1103:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1104:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef
1105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1106:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_WRPConfig(FLASH_OBProgramInitTypeDef *pOBInit, FunctionalState Ne
1107:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1108:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1109:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1110:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1112:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  
1113:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1114:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1115:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1117:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1118:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 0 to 31 */
1119:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPSector0To31 != 0U)
1120:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1121:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP1OrPCROP1(pOBInit->WRPSector0To31, NewState);
1122:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1123:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1124:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)   
1125:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA)
1126:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD) 
1127:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)
1128:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       
1129:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for Cat3, Cat4 & Cat5 devices*/
1130:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 32 to 63 */
1131:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPSector32To63 != 0U)
1132:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1133:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP2OrPCROP2(pOBInit->WRPSector32To63, NewState);
1134:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1135:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || (...) || STM32L151xE || STM32L152xE || STM32
1137:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1138:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) 
1139:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  
1140:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xE)
1141:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       
1142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for devices with FLASH >= 256KB*/
1143:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 64 to 95 */
1144:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPSector64To95 != 0U)
1145:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1146:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP3(pOBInit->WRPSector64To95, NewState);
1147:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1148:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
ARM GAS  /tmp/cc9qRquU.s 			page 23


1149:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD || STM32L151xE || STM32L152xE || STM32L162xE */
1150:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1151:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
1152:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xDX) || defined(STM32L162xDX)
1153:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1154:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for Cat5 devices*/
1155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 96 to 127 */
1156:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPSector96To127 != 0U)
1157:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP4(pOBInit->WRPSector96To127, NewState);
1159:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1160:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1161:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xE || STM32L152xE || STM32L162xE || STM32L151xDX || ... */
1162:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1163:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1165:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1166:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1167:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the write protection operation Status */
1168:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;      
1169:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1170:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1171:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xBA) || defined(STM32L152xBA) || defined(STM32L151xC) || defined(STM32L152xC) 
1172:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xC)
1173:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1174:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enables the read/write protection (PCROP) of the desired 
1175:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         sectors.
1176:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat2 & Cat3 devices
1177:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pAdvOBInit pointer to an FLASH_AdvOBProgramInitTypeDef structure that
1178:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains PCROP parameters.
1179:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages read/Write protection.
1180:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1181:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1182:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1183:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_PCROPConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit, Functional
1184:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1185:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1186:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   FunctionalState pcropstate = DISABLE;
1187:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1189:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1190:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1191:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Invert state to use same function of WRP */
1192:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState == DISABLE)
1193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1194:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pcropstate = ENABLE;
1195:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1196:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         
1197:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1198:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1199:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1200:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1201:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1202:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for Cat2 devices*/
1203:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* PCROP for sector between 0 to 31 */
1204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pAdvOBInit->PCROPSector0To31 != 0U)
1205:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
ARM GAS  /tmp/cc9qRquU.s 			page 24


1206:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP1OrPCROP1(pAdvOBInit->PCROPSector0To31, pcropstate);
1207:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1208:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1209:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)
1210:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1211:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for Cat3 devices*/
1212:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 32 to 63 */
1213:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pAdvOBInit->PCROPSector32To63 != 0U)
1214:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1215:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP2OrPCROP2(pAdvOBInit->PCROPSector32To63, pcropstate);
1216:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1217:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1218:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC  */
1219:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1220:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1221:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1222:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1223:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1224:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the write protection operation Status */
1225:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;      
1226:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xBA || STM32L152xBA || STM32L151xC || STM32L152xC || STM32L162xC */
1228:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1229:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1230:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Write protects the desired pages of the first 128KB of the Flash.
1231:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  WRP1OrPCROP1 specifies the address of the pages to be write protected.
1232:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection1
1233:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Write protection.
1234:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1236:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1237:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void FLASH_OB_WRPConfigWRP1OrPCROP1(uint32_t WRP1OrPCROP1, FunctionalState NewState)
1238:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 114              		.loc 1 1238 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119              	.LVL2:
1239:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t wrp01data = 0U, wrp23data = 0U;
1240:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1241:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
1242:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1243:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1244:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WRP1OrPCROP1));
1245:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1246:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1247:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState != DISABLE)
 120              		.loc 1 1247 0
 121 0000 81B1     		cbz	r1, .L14
1248:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1249:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp01data = (uint16_t)(((WRP1OrPCROP1 & WRP_MASK_LOW) | OB->WRP01));
 122              		.loc 1 1249 0
 123 0002 1149     		ldr	r1, .L16
 124              	.LVL3:
 125 0004 8A68     		ldr	r2, [r1, #8]
 126 0006 0243     		orrs	r2, r2, r0
ARM GAS  /tmp/cc9qRquU.s 			page 25


 127 0008 92B2     		uxth	r2, r2
 128              	.LVL4:
1250:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp23data = (uint16_t)((((WRP1OrPCROP1 & WRP_MASK_HIGH)>>16U | OB->WRP23))); 
 129              		.loc 1 1250 0
 130 000a CB68     		ldr	r3, [r1, #12]
 131 000c 43EA1040 		orr	r0, r3, r0, lsr #16
 132              	.LVL5:
 133 0010 80B2     		uxth	r0, r0
 134              	.LVL6:
1251:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp01data) << 16U)|(wrp01data);
 135              		.loc 1 1251 0
 136 0012 D343     		mvns	r3, r2
 137 0014 42EA0342 		orr	r2, r2, r3, lsl #16
 138              	.LVL7:
1252:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP01 = tmp1;
 139              		.loc 1 1252 0
 140 0018 8A60     		str	r2, [r1, #8]
1253:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1254:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(~(wrp23data) << 16U)|(wrp23data);
 141              		.loc 1 1254 0
 142 001a C343     		mvns	r3, r0
 143              	.LVL8:
 144 001c 40EA0340 		orr	r0, r0, r3, lsl #16
 145              	.LVL9:
1255:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP23 = tmp2;      
 146              		.loc 1 1255 0
 147 0020 C860     		str	r0, [r1, #12]
 148 0022 7047     		bx	lr
 149              	.LVL10:
 150              	.L14:
1256:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1257:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1258:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1259:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp01data = (uint16_t)(~WRP1OrPCROP1 & (WRP_MASK_LOW & OB->WRP01));
 151              		.loc 1 1259 0
 152 0024 0849     		ldr	r1, .L16
 153              	.LVL11:
 154 0026 8B68     		ldr	r3, [r1, #8]
 155 0028 23EA0003 		bic	r3, r3, r0
 156 002c 9BB2     		uxth	r3, r3
 157              	.LVL12:
1260:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp23data = (uint16_t)((((~WRP1OrPCROP1 & WRP_MASK_HIGH)>>16U & OB->WRP23))); 
 158              		.loc 1 1260 0
 159 002e C043     		mvns	r0, r0
 160              	.LVL13:
 161 0030 CA68     		ldr	r2, [r1, #12]
 162 0032 02EA1040 		and	r0, r2, r0, lsr #16
 163              	.LVL14:
1261:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1262:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)((~wrp01data) << 16U)|(wrp01data);
 164              		.loc 1 1262 0
 165 0036 DA43     		mvns	r2, r3
 166 0038 43EA0243 		orr	r3, r3, r2, lsl #16
 167              	.LVL15:
1263:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP01 = tmp1;
 168              		.loc 1 1263 0
 169 003c 8B60     		str	r3, [r1, #8]
ARM GAS  /tmp/cc9qRquU.s 			page 26


1264:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1265:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)((~wrp23data) << 16U)|(wrp23data);
 170              		.loc 1 1265 0
 171 003e C343     		mvns	r3, r0
 172              	.LVL16:
 173 0040 40EA0340 		orr	r0, r0, r3, lsl #16
 174              	.LVL17:
1266:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP23 = tmp2;
 175              		.loc 1 1266 0
 176 0044 C860     		str	r0, [r1, #12]
 177              	.LVL18:
 178 0046 7047     		bx	lr
 179              	.L17:
 180              		.align	2
 181              	.L16:
 182 0048 0000F81F 		.word	536346624
 183              		.cfi_endproc
 184              	.LFE93:
 186              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 187              		.align	2
 188              		.thumb
 189              		.thumb_func
 191              	FLASH_OB_WRPConfig:
 192              	.LFB91:
1107:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 193              		.loc 1 1107 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              	.LVL19:
 198 0000 38B5     		push	{r3, r4, r5, lr}
 199              	.LCFI0:
 200              		.cfi_def_cfa_offset 16
 201              		.cfi_offset 3, -16
 202              		.cfi_offset 4, -12
 203              		.cfi_offset 5, -8
 204              		.cfi_offset 14, -4
 205 0002 0446     		mov	r4, r0
 206 0004 0D46     		mov	r5, r1
 207              	.LVL20:
1111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  
 208              		.loc 1 1111 0
 209 0006 4CF25030 		movw	r0, #50000
 210              	.LVL21:
 211 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 212              	.LVL22:
1113:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 213              		.loc 1 1113 0
 214 000e 0346     		mov	r3, r0
 215 0010 60B9     		cbnz	r0, .L19
1116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 216              		.loc 1 1116 0
 217 0012 0022     		movs	r2, #0
 218 0014 064B     		ldr	r3, .L22
 219 0016 5A61     		str	r2, [r3, #20]
1119:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 220              		.loc 1 1119 0
ARM GAS  /tmp/cc9qRquU.s 			page 27


 221 0018 A068     		ldr	r0, [r4, #8]
 222              	.LVL23:
 223 001a 10B1     		cbz	r0, .L20
1121:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 224              		.loc 1 1121 0
 225 001c 2946     		mov	r1, r5
 226 001e FFF7FEFF 		bl	FLASH_OB_WRPConfigWRP1OrPCROP1
 227              	.LVL24:
 228              	.L20:
1164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 229              		.loc 1 1164 0
 230 0022 4CF25030 		movw	r0, #50000
 231 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 232              	.LVL25:
 233 002a 0346     		mov	r3, r0
 234              	.LVL26:
 235              	.L19:
1169:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 236              		.loc 1 1169 0
 237 002c 1846     		mov	r0, r3
 238 002e 38BD     		pop	{r3, r4, r5, pc}
 239              	.LVL27:
 240              	.L23:
 241              		.align	2
 242              	.L22:
 243 0030 00000000 		.word	pFlash
 244              		.cfi_endproc
 245              	.LFE91:
 247              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 248              		.align	2
 249              		.thumb
 250              		.thumb_func
 252              	FLASH_OB_RDPConfig:
 253              	.LFB86:
 959:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 254              		.loc 1 959 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258              	.LVL28:
 259 0000 10B5     		push	{r4, lr}
 260              	.LCFI1:
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 4, -8
 263              		.cfi_offset 14, -4
 264              	.LVL29:
 966:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 265              		.loc 1 966 0
 266 0002 114B     		ldr	r3, .L29
 267 0004 1B68     		ldr	r3, [r3]
 268 0006 DBB2     		uxtb	r3, r3
 269              	.LVL30:
 973:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 270              		.loc 1 973 0
 271 0008 AA2B     		cmp	r3, #170
 272 000a 01D1     		bne	.L25
 973:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
ARM GAS  /tmp/cc9qRquU.s 			page 28


 273              		.loc 1 973 0 is_stmt 0 discriminator 1
 274 000c AA28     		cmp	r0, #170
 275 000e 18D0     		beq	.L27
 276              	.L25:
 982:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif
 277              		.loc 1 982 0 is_stmt 1
 278 0010 0D4B     		ldr	r3, .L29
 279              	.LVL31:
 280 0012 1B68     		ldr	r3, [r3]
 281 0014 03F48073 		and	r3, r3, #256
 282              	.LVL32:
 986:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 283              		.loc 1 986 0
 284 0018 1843     		orrs	r0, r0, r3
 285              	.LVL33:
 286 001a C443     		mvns	r4, r0
 287              	.LVL34:
 987:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 288              		.loc 1 987 0
 289 001c 40EA0444 		orr	r4, r0, r4, lsl #16
 290              	.LVL35:
 990:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 291              		.loc 1 990 0
 292 0020 4CF25030 		movw	r0, #50000
 293              	.LVL36:
 294 0024 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 295              	.LVL37:
 992:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 296              		.loc 1 992 0
 297 0028 0346     		mov	r3, r0
 298 002a 58B9     		cbnz	r0, .L26
 995:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 299              		.loc 1 995 0
 300 002c 0022     		movs	r2, #0
 301 002e 074B     		ldr	r3, .L29+4
 302 0030 5A61     		str	r2, [r3, #20]
 998:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 303              		.loc 1 998 0
 304 0032 054B     		ldr	r3, .L29
 305 0034 1C60     		str	r4, [r3]
1001:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 306              		.loc 1 1001 0
 307 0036 4CF25030 		movw	r0, #50000
 308              	.LVL38:
 309 003a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 310              	.LVL39:
 311 003e 0346     		mov	r3, r0
 312              	.LVL40:
 313 0040 00E0     		b	.L26
 314              	.LVL41:
 315              	.L27:
 976:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 316              		.loc 1 976 0
 317 0042 0123     		movs	r3, #1
 318              	.LVL42:
 319              	.L26:
1007:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cc9qRquU.s 			page 29


 320              		.loc 1 1007 0
 321 0044 1846     		mov	r0, r3
 322 0046 10BD     		pop	{r4, pc}
 323              	.L30:
 324              		.align	2
 325              	.L29:
 326 0048 0000F81F 		.word	536346624
 327 004c 00000000 		.word	pFlash
 328              		.cfi_endproc
 329              	.LFE86:
 331              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 332              		.align	2
 333              		.thumb
 334              		.thumb_func
 336              	FLASH_OB_UserConfig:
 337              	.LFB94:
1267:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1268:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1269:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1270:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)   
1271:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA)
1272:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD) 
1273:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)
1274:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1275:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enable Write protects the desired pages of the second 128KB of the Flash.
1276:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat3, Cat4  & Cat5 devices.
1277:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  WRP2OrPCROP2 specifies the address of the pages to be write protected.
1278:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection2
1279:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Wtite protection.
1280:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1281:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1282:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1283:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void FLASH_OB_WRPConfigWRP2OrPCROP2(uint32_t WRP2OrPCROP2, FunctionalState NewState)
1284:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1285:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t wrp45data = 0U, wrp67data = 0U;
1286:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1287:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
1288:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1289:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1290:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WRP2OrPCROP2));
1291:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1293:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState != DISABLE)
1294:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1295:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp45data = (uint16_t)(((WRP2OrPCROP2 & WRP_MASK_LOW) | OB->WRP45));
1296:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp67data = (uint16_t)((((WRP2OrPCROP2 & WRP_MASK_HIGH)>>16U | OB->WRP67))); 
1297:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp45data) << 16U)|(wrp45data);
1298:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP45 = tmp1;
1299:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(~(wrp67data) << 16U)|(wrp67data);
1301:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP67 = tmp2;
1302:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1303:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1304:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1305:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp45data = (uint16_t)(~WRP2OrPCROP2 & (WRP_MASK_LOW & OB->WRP45));
1306:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp67data = (uint16_t)((((~WRP2OrPCROP2 & WRP_MASK_HIGH)>>16U & OB->WRP67))); 
1307:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
ARM GAS  /tmp/cc9qRquU.s 			page 30


1308:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)((~wrp45data) << 16U)|(wrp45data);
1309:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP45 = tmp1;
1310:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1311:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)((~wrp67data) << 16U)|(wrp67data);
1312:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP67 = tmp2;
1313:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1314:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1315:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || (...) || STM32L151xE || STM32L152xE || STM32
1316:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1317:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) 
1318:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  
1319:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xE)
1320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1321:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enable Write protects the desired pages of the third 128KB of the Flash.
1322:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32L151xD, STM32L152xD, STM32L162xD  & Cat5 device
1323:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  WRP3 specifies the address of the pages to be write protected.
1324:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection3
1325:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Wtite protection.
1326:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1327:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1328:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1329:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void FLASH_OB_WRPConfigWRP3(uint32_t WRP3, FunctionalState NewState)
1330:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1331:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t wrp89data = 0U, wrp1011data = 0U;
1332:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1333:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
1334:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1335:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1336:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WRP3));
1337:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1338:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1339:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState != DISABLE)
1340:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1341:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp89data = (uint16_t)(((WRP3 & WRP_MASK_LOW) | OB->WRP89));
1342:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1011data = (uint16_t)((((WRP3 & WRP_MASK_HIGH)>>16U | OB->WRP1011))); 
1343:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp89data) << 16U)|(wrp89data);
1344:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP89 = tmp1;
1345:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1346:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(~(wrp1011data) << 16U)|(wrp1011data);
1347:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1011 = tmp2;      
1348:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1349:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1350:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1351:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp89data = (uint16_t)(~WRP3 & (WRP_MASK_LOW & OB->WRP89));
1352:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1011data = (uint16_t)((((~WRP3 & WRP_MASK_HIGH)>>16U & OB->WRP1011))); 
1353:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1354:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)((~wrp89data) << 16U)|(wrp89data);
1355:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP89 = tmp1;
1356:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1357:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)((~wrp1011data) << 16U)|(wrp1011data);
1358:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1011 = tmp2;
1359:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1360:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1361:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD || STM32L151xE || STM32L152xE || STM32L162xE */
1362:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1363:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
1364:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xDX) || defined(STM32L162xDX)
ARM GAS  /tmp/cc9qRquU.s 			page 31


1365:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1366:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enable Write protects the desired pages of the Fourth 128KB of the Flash.
1367:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat5 & STM32L1xxDX devices.
1368:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  WRP4 specifies the address of the pages to be write protected.
1369:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection4
1370:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Wtite protection.
1371:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1372:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1373:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1374:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void FLASH_OB_WRPConfigWRP4(uint32_t WRP4, FunctionalState NewState)
1375:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1376:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t wrp1213data = 0U, wrp1415data = 0U;
1377:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1378:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
1379:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1380:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1381:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WRP4));
1382:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1383:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1384:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState != DISABLE)
1385:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1386:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1213data = (uint16_t)(((WRP4 & WRP_MASK_LOW) | OB->WRP1213));
1387:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1415data = (uint16_t)((((WRP4 & WRP_MASK_HIGH)>>16U | OB->WRP1415))); 
1388:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp1213data) << 16U)|(wrp1213data);
1389:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1213 = tmp1;
1390:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1391:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(~(wrp1415data) << 16U)|(wrp1415data);
1392:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1415 = tmp2;      
1393:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1394:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1395:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1396:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1213data = (uint16_t)(~WRP4 & (WRP_MASK_LOW & OB->WRP1213));
1397:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1415data = (uint16_t)((((~WRP4 & WRP_MASK_HIGH)>>16U & OB->WRP1415))); 
1398:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1399:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)((~wrp1213data) << 16U)|(wrp1213data);
1400:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1213 = tmp1;
1401:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1402:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)((~wrp1415data) << 16U)|(wrp1415data);
1403:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1415 = tmp2;
1404:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1405:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1406:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xE || STM32L152xE || STM32L162xE || STM32L151xDX || ... */
1407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1408:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1409:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.
1410:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_IWDG Selects the WDG mode.
1411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1412:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_IWDG_SW Software WDG selected
1413:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_IWDG_HW Hardware WDG selected
1414:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_STOP Reset event when entering STOP mode.
1415:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1416:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_STOP_NORST No reset generated when entering in STOP
1417:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_STOP_RST Reset generated when entering in STOP
1418:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_STDBY Reset event when entering Standby mode.
1419:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1420:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_STDBY_NORST No reset generated when entering in STANDBY
1421:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_STDBY_RST Reset generated when entering in STANDBY
ARM GAS  /tmp/cc9qRquU.s 			page 32


1422:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1423:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1424:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1425:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 338              		.loc 1 1425 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              	.LVL43:
 343 0000 10B5     		push	{r4, lr}
 344              	.LCFI2:
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 4, -8
 347              		.cfi_offset 14, -4
 348              	.LVL44:
1426:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK; 
1427:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmp1 = 0U;
1428:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1429:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1433:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1434:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Get the User Option byte register */
1435:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = OB->USER & ((~(FLASH_OBR_IWDG_SW | FLASH_OBR_nRST_STOP | FLASH_OBR_nRST_STDBY)) >> 16U);
 349              		.loc 1 1435 0
 350 0002 0F4B     		ldr	r3, .L34
 351 0004 5B68     		ldr	r3, [r3, #4]
 352 0006 23F07003 		bic	r3, r3, #112
 353 000a 1B04     		lsls	r3, r3, #16
 354 000c 1B0C     		lsrs	r3, r3, #16
 355              	.LVL45:
1436:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1437:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Calculate the user option byte to write */ 
1438:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(O
 356              		.loc 1 1438 0
 357 000e 0843     		orrs	r0, r0, r1
 358              	.LVL46:
 359 0010 0243     		orrs	r2, r2, r0
 360              	.LVL47:
 361 0012 1A43     		orrs	r2, r2, r3
 362 0014 D443     		mvns	r4, r2
 363              	.LVL48:
1439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
 364              		.loc 1 1439 0
 365 0016 42EA0444 		orr	r4, r2, r4, lsl #16
 366              	.LVL49:
1440:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1441:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1442:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 367              		.loc 1 1442 0
 368 001a 4CF25030 		movw	r0, #50000
 369 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 370              	.LVL50:
1443:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1444:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 371              		.loc 1 1444 0
ARM GAS  /tmp/cc9qRquU.s 			page 33


 372 0022 0346     		mov	r3, r0
 373 0024 48B9     		cbnz	r0, .L32
1445:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
1446:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1447:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 374              		.loc 1 1447 0
 375 0026 0022     		movs	r2, #0
 376 0028 064B     		ldr	r3, .L34+4
 377 002a 5A61     		str	r2, [r3, #20]
1448:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1449:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Write the User Option Byte */
1450:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->USER = tmp;
 378              		.loc 1 1450 0
 379 002c 044B     		ldr	r3, .L34
 380 002e 5C60     		str	r4, [r3, #4]
1451:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1452:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1453:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 381              		.loc 1 1453 0
 382 0030 4CF25030 		movw	r0, #50000
 383              	.LVL51:
 384 0034 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 385              	.LVL52:
 386 0038 0346     		mov	r3, r0
 387              	.LVL53:
 388              	.L32:
1454:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1455:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1456:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Option Byte program Status */
1457:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1458:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 389              		.loc 1 1458 0
 390 003a 1846     		mov	r0, r3
 391 003c 10BD     		pop	{r4, pc}
 392              	.LVL54:
 393              	.L35:
 394 003e 00BF     		.align	2
 395              	.L34:
 396 0040 0000F81F 		.word	536346624
 397 0044 00000000 		.word	pFlash
 398              		.cfi_endproc
 399              	.LFE94:
 401              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 402              		.align	2
 403              		.thumb
 404              		.thumb_func
 406              	FLASH_OB_BORConfig:
 407              	.LFB87:
1023:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 408              		.loc 1 1023 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              	.LVL55:
 413 0000 10B5     		push	{r4, lr}
 414              	.LCFI3:
 415              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc9qRquU.s 			page 34


 416              		.cfi_offset 4, -8
 417              		.cfi_offset 14, -4
 418              	.LVL56:
1031:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 419              		.loc 1 1031 0
 420 0002 0E4B     		ldr	r3, .L39
 421 0004 5B68     		ldr	r3, [r3, #4]
 422 0006 23F00F03 		bic	r3, r3, #15
 423 000a 1B04     		lsls	r3, r3, #16
 424 000c 1B0C     		lsrs	r3, r3, #16
 425              	.LVL57:
1034:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp |= (OB_BOR | tmp1);
 426              		.loc 1 1034 0
 427 000e 1843     		orrs	r0, r0, r3
 428              	.LVL58:
 429 0010 C443     		mvns	r4, r0
 430              	.LVL59:
1035:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 431              		.loc 1 1035 0
 432 0012 40EA0444 		orr	r4, r0, r4, lsl #16
 433              	.LVL60:
1038:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 434              		.loc 1 1038 0
 435 0016 4CF25030 		movw	r0, #50000
 436 001a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 437              	.LVL61:
1040:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
 438              		.loc 1 1040 0
 439 001e 0346     		mov	r3, r0
 440 0020 48B9     		cbnz	r0, .L37
1043:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 441              		.loc 1 1043 0
 442 0022 0022     		movs	r2, #0
 443 0024 064B     		ldr	r3, .L39+4
 444 0026 5A61     		str	r2, [r3, #20]
1046:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 445              		.loc 1 1046 0
 446 0028 044B     		ldr	r3, .L39
 447 002a 5C60     		str	r4, [r3, #4]
1049:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 448              		.loc 1 1049 0
 449 002c 4CF25030 		movw	r0, #50000
 450              	.LVL62:
 451 0030 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 452              	.LVL63:
 453 0034 0346     		mov	r3, r0
 454              	.LVL64:
 455              	.L37:
1054:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 456              		.loc 1 1054 0
 457 0036 1846     		mov	r0, r3
 458 0038 10BD     		pop	{r4, pc}
 459              	.LVL65:
 460              	.L40:
 461 003a 00BF     		.align	2
 462              	.L39:
 463 003c 0000F81F 		.word	536346624
ARM GAS  /tmp/cc9qRquU.s 			page 35


 464 0040 00000000 		.word	pFlash
 465              		.cfi_endproc
 466              	.LFE87:
 468              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 469              		.align	2
 470              		.thumb
 471              		.thumb_func
 473              	FLASH_OB_PCROPConfig:
 474              	.LFB92:
1184:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 475              		.loc 1 1184 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              	.LVL66:
 480 0000 38B5     		push	{r3, r4, r5, lr}
 481              	.LCFI4:
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 3, -16
 484              		.cfi_offset 4, -12
 485              		.cfi_offset 5, -8
 486              		.cfi_offset 14, -4
 487 0002 0546     		mov	r5, r0
 488 0004 0C46     		mov	r4, r1
 489              	.LVL67:
1189:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 490              		.loc 1 1189 0
 491 0006 4CF25030 		movw	r0, #50000
 492              	.LVL68:
 493 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 494              	.LVL69:
1192:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 495              		.loc 1 1192 0
 496 000e 0CB1     		cbz	r4, .L45
1186:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 497              		.loc 1 1186 0
 498 0010 0021     		movs	r1, #0
 499 0012 00E0     		b	.L42
 500              	.L45:
1194:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 501              		.loc 1 1194 0
 502 0014 0121     		movs	r1, #1
 503              	.L42:
 504              	.LVL70:
1197:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 505              		.loc 1 1197 0
 506 0016 50B9     		cbnz	r0, .L43
1200:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 507              		.loc 1 1200 0
 508 0018 0022     		movs	r2, #0
 509 001a 054B     		ldr	r3, .L47
 510 001c 5A61     		str	r2, [r3, #20]
1204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 511              		.loc 1 1204 0
 512 001e A868     		ldr	r0, [r5, #8]
 513              	.LVL71:
 514 0020 08B1     		cbz	r0, .L44
ARM GAS  /tmp/cc9qRquU.s 			page 36


1206:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 515              		.loc 1 1206 0
 516 0022 FFF7FEFF 		bl	FLASH_OB_WRPConfigWRP1OrPCROP1
 517              	.LVL72:
 518              	.L44:
1221:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 519              		.loc 1 1221 0
 520 0026 4CF25030 		movw	r0, #50000
 521 002a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 522              	.LVL73:
 523              	.L43:
1226:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xBA || STM32L152xBA || STM32L151xC || STM32L152xC || STM32L162xC */
 524              		.loc 1 1226 0
 525 002e 38BD     		pop	{r3, r4, r5, pc}
 526              	.LVL74:
 527              	.L48:
 528              		.align	2
 529              	.L47:
 530 0030 00000000 		.word	pFlash
 531              		.cfi_endproc
 532              	.LFE92:
 534              		.section	.text.FLASH_DATAEEPROM_ProgramWord,"ax",%progbits
 535              		.align	2
 536              		.thumb
 537              		.thumb_func
 539              	FLASH_DATAEEPROM_ProgramWord:
 540              	.LFB100:
1459:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1460:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_nRST_BFB2)
1461:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1462:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Configures to boot from Bank1 or Bank2.
1463:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_BOOT select the FLASH Bank to boot from.
1464:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1465:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOOT_BANK2 At startup, if boot pins are set in boot from user Flash
1466:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        position and this parameter is selected the device will boot from Bank2 or Bank1,
1467:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        depending on the activation of the bank. The active banks are checked in
1468:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        the following order: Bank2, followed by Bank1.
1469:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        The active bank is recognized by the value programmed at the base address
1470:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        of the respective bank (corresponding to the initial stack pointer value
1471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        in the interrupt vector table).
1472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOOT_BANK1 At startup, if boot pins are set in boot from user Flash
1473:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        position and this parameter is selected the device will boot from Bank1(Default).
1474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        For more information, please refer to AN2606 from www.st.com. 
1475:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1477:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t OB_BOOT)
1478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1479:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK; 
1480:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmp1 = 0U;
1481:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1482:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1483:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_BOOT_BANK(OB_BOOT));
1484:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1485:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Get the User Option byte register  and BOR Level*/
1486:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = OB->USER & ((~FLASH_OBR_nRST_BFB2) >> 16U);
1487:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1488:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Calculate the option byte to write */
ARM GAS  /tmp/cc9qRquU.s 			page 37


1489:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp = (uint32_t)~(OB_BOOT | tmp1) << 16U;
1490:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp |= (OB_BOOT | tmp1);
1491:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1492:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1493:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1494:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1495:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1496:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
1497:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1498:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1499:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1500:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Write the BOOT Option Byte */
1501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->USER = tmp;
1502:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1503:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1504:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1505:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1506:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1507:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Option Byte program Status */
1508:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1509:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1510:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1511:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_nRST_BFB2 */
1512:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1513:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /*
1514:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** ==============================================================================
1515:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****               DATA
1516:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** ==============================================================================
1517:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** */
1518:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1519:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1520:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Write a Byte at a specified address in data memory.
1521:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1522:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1523:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function assumes that the is data word is already erased.
1524:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1525:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1526:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
1527:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1528:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1529:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1530:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmpaddr = 0U;
1531:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1532:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1533:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1534:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address)); 
1535:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1536:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1537:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1538:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1539:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1540:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1541:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clear the FTDW bit */
1542:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
1543:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1544:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1545:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Possible only on Cat1 devices */
ARM GAS  /tmp/cc9qRquU.s 			page 38


1546:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(Data != (uint8_t)0x00U) 
1547:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1548:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* If the previous operation is completed, proceed to write the new Data */
1549:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint8_t *)Address = Data;
1550:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             
1551:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1552:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1554:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
1555:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1556:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmpaddr = Address & 0xFFFFFFFCU;
1557:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmp = * (__IO uint32_t *) tmpaddr;
1558:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
1559:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmp &= ~tmpaddr;
1560:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
1561:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
1562:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
1563:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFC
1564:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Locked */
1565:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_LOCK(&pFlash);
1566:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1567:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #else /*!Cat1*/ 
1568:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* If the previous operation is completed, proceed to write the new Data */
1569:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint8_t *)Address = Data;
1570:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             
1571:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1572:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1573:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1574:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1575:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1576:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1577:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1578:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1579:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1580:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Writes a half word at a specified address in data memory.
1581:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1582:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1583:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function assumes that the is data word is already erased.
1584:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1585:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1586:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
1587:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1588:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1589:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1590:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmpaddr = 0U;
1591:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1592:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1593:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1594:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
1595:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1596:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1597:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1598:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1599:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1600:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1601:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clear the FTDW bit */
1602:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
ARM GAS  /tmp/cc9qRquU.s 			page 39


1603:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1604:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1605:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Possible only on Cat1 devices */
1606:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(Data != (uint16_t)0x0000U) 
1607:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1608:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* If the previous operation is completed, proceed to write the new data */
1609:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint16_t *)Address = Data;
1610:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1611:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1612:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1613:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1614:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
1615:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1616:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
1617:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
1618:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if((Address & 0x3U) != 0x3U)
1619:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
1620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmpaddr = Address & 0xFFFFFFFCU;
1621:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmp = * (__IO uint32_t *) tmpaddr;
1622:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
1623:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmp &= ~tmpaddr;        
1624:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
1625:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFF
1626:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
1627:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       else
1628:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
1629:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
1630:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
1631:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
1632:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Locked */
1633:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_LOCK(&pFlash);
1634:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1635:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #else /* !Cat1 */
1636:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* If the previous operation is completed, proceed to write the new data */
1637:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint16_t *)Address = Data;
1638:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1639:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1640:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1641:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1642:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1643:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1644:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1645:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1646:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1647:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1648:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Programs a word at a specified address in data memory.
1649:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1650:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1651:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function assumes that the is data word is already erased.
1652:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1653:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1654:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
1655:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1656:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1657:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1658:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1659:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
ARM GAS  /tmp/cc9qRquU.s 			page 40


1660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1661:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1662:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1663:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1664:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1665:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1666:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clear the FTDW bit */
1667:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
1668:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1669:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* If the previous operation is completed, proceed to program the new data */    
1670:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint32_t *)Address = Data;
1671:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1672:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1673:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);       
1674:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1675:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1676:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1677:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1678:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1679:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1680:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Write a Byte at a specified address in data memory without erase.
1681:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1682:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1683:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1684:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1685:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
1686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1687:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1688:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1689:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmpaddr = 0U;
1690:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1691:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1692:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1693:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address)); 
1694:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1695:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1696:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1697:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1698:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1699:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1700:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1701:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(Data != (uint8_t) 0x00U)
1702:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {  
1703:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint8_t *)Address = Data;
1704:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1705:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1706:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1707:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1708:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1709:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
1710:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1711:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmpaddr = Address & 0xFFFFFFFCU;
1712:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmp = * (__IO uint32_t *) tmpaddr;
1713:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
1714:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmp &= ~tmpaddr;        
1715:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
1716:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
ARM GAS  /tmp/cc9qRquU.s 			page 41


1717:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
1718:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFC
1719:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Locked */
1720:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_LOCK(&pFlash);
1721:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1722:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #else /* Not Cat1*/
1723:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint8_t *)Address = Data;
1724:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1725:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1726:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1727:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1728:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1729:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1730:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1731:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1732:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1733:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1734:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Writes a half word at a specified address in data memory without erase.
1735:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1736:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1737:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1738:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1739:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
1740:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1741:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1742:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1743:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmpaddr = 0U;
1744:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1745:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1746:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1747:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
1748:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1749:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1750:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1751:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1752:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1753:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1754:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1755:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(Data != (uint16_t)0x0000U)
1756:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1757:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint16_t *)Address = Data;
1758:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
1759:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1760:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1761:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1762:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
1763:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1764:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
1765:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
1766:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if((Address & 0x3U) != 0x3U)
1767:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
1768:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmpaddr = Address & 0xFFFFFFFCU;
1769:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmp = * (__IO uint32_t *) tmpaddr;
1770:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
1771:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmp &= ~tmpaddr;          
1772:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
1773:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFF
ARM GAS  /tmp/cc9qRquU.s 			page 42


1774:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
1775:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       else
1776:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
1777:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
1778:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
1779:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
1780:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Locked */
1781:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_LOCK(&pFlash);
1782:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1783:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #else /* Not Cat1*/
1784:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint16_t *)Address = Data;
1785:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
1786:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1787:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1788:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1789:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1790:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1791:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1792:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1793:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1794:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1795:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Programs a word at a specified address in data memory without erase.
1796:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1797:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1798:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1799:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1800:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
1801:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 541              		.loc 1 1801 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              	.LVL75:
 546 0000 38B5     		push	{r3, r4, r5, lr}
 547              	.LCFI5:
 548              		.cfi_def_cfa_offset 16
 549              		.cfi_offset 3, -16
 550              		.cfi_offset 4, -12
 551              		.cfi_offset 5, -8
 552              		.cfi_offset 14, -4
 553 0002 0446     		mov	r4, r0
 554 0004 0D46     		mov	r5, r1
 555              	.LVL76:
1802:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1803:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1804:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1805:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
1806:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1807:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1808:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 556              		.loc 1 1808 0
 557 0006 4CF25030 		movw	r0, #50000
 558              	.LVL77:
 559 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 560              	.LVL78:
1809:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1810:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
ARM GAS  /tmp/cc9qRquU.s 			page 43


 561              		.loc 1 1810 0
 562 000e 0346     		mov	r3, r0
 563 0010 28B9     		cbnz	r0, .L50
1811:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1812:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint32_t *)Address = Data;
 564              		.loc 1 1812 0
 565 0012 2560     		str	r5, [r4]
1813:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1814:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1815:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 566              		.loc 1 1815 0
 567 0014 4CF25030 		movw	r0, #50000
 568              	.LVL79:
 569 0018 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 570              	.LVL80:
 571 001c 0346     		mov	r3, r0
 572              	.LVL81:
 573              	.L50:
1816:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1817:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1818:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1819:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 574              		.loc 1 1819 0
 575 001e 1846     		mov	r0, r3
 576 0020 38BD     		pop	{r3, r4, r5, pc}
 577              		.cfi_endproc
 578              	.LFE100:
 580 0022 00BF     		.section	.text.FLASH_DATAEEPROM_ProgramHalfWord,"ax",%progbits
 581              		.align	2
 582              		.thumb
 583              		.thumb_func
 585              	FLASH_DATAEEPROM_ProgramHalfWord:
 586              	.LFB99:
1740:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 587              		.loc 1 1740 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              	.LVL82:
 592 0000 38B5     		push	{r3, r4, r5, lr}
 593              	.LCFI6:
 594              		.cfi_def_cfa_offset 16
 595              		.cfi_offset 3, -16
 596              		.cfi_offset 4, -12
 597              		.cfi_offset 5, -8
 598              		.cfi_offset 14, -4
 599 0002 0446     		mov	r4, r0
 600 0004 0D46     		mov	r5, r1
 601              	.LVL83:
1750:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 602              		.loc 1 1750 0
 603 0006 4CF25030 		movw	r0, #50000
 604              	.LVL84:
 605 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 606              	.LVL85:
1752:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 607              		.loc 1 1752 0
ARM GAS  /tmp/cc9qRquU.s 			page 44


 608 000e 0346     		mov	r3, r0
 609 0010 28B9     		cbnz	r0, .L53
1784:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
 610              		.loc 1 1784 0
 611 0012 2580     		strh	r5, [r4]	@ movhi
1787:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
 612              		.loc 1 1787 0
 613 0014 4CF25030 		movw	r0, #50000
 614              	.LVL86:
 615 0018 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 616              	.LVL87:
 617 001c 0346     		mov	r3, r0
 618              	.LVL88:
 619              	.L53:
1792:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 620              		.loc 1 1792 0
 621 001e 1846     		mov	r0, r3
 622 0020 38BD     		pop	{r3, r4, r5, pc}
 623              		.cfi_endproc
 624              	.LFE99:
 626 0022 00BF     		.section	.text.FLASH_DATAEEPROM_ProgramByte,"ax",%progbits
 627              		.align	2
 628              		.thumb
 629              		.thumb_func
 631              	FLASH_DATAEEPROM_ProgramByte:
 632              	.LFB98:
1686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 633              		.loc 1 1686 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 0, uses_anonymous_args = 0
 637              	.LVL89:
 638 0000 38B5     		push	{r3, r4, r5, lr}
 639              	.LCFI7:
 640              		.cfi_def_cfa_offset 16
 641              		.cfi_offset 3, -16
 642              		.cfi_offset 4, -12
 643              		.cfi_offset 5, -8
 644              		.cfi_offset 14, -4
 645 0002 0446     		mov	r4, r0
 646 0004 0D46     		mov	r5, r1
 647              	.LVL90:
1696:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 648              		.loc 1 1696 0
 649 0006 4CF25030 		movw	r0, #50000
 650              	.LVL91:
 651 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 652              	.LVL92:
1698:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 653              		.loc 1 1698 0
 654 000e 0346     		mov	r3, r0
 655 0010 28B9     		cbnz	r0, .L56
1723:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 656              		.loc 1 1723 0
 657 0012 2570     		strb	r5, [r4]
1726:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
 658              		.loc 1 1726 0
ARM GAS  /tmp/cc9qRquU.s 			page 45


 659 0014 4CF25030 		movw	r0, #50000
 660              	.LVL93:
 661 0018 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 662              	.LVL94:
 663 001c 0346     		mov	r3, r0
 664              	.LVL95:
 665              	.L56:
1731:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 666              		.loc 1 1731 0
 667 001e 1846     		mov	r0, r3
 668 0020 38BD     		pop	{r3, r4, r5, pc}
 669              		.cfi_endproc
 670              	.LFE98:
 672 0022 00BF     		.section	.text.FLASH_DATAEEPROM_FastProgramByte,"ax",%progbits
 673              		.align	2
 674              		.thumb
 675              		.thumb_func
 677              	FLASH_DATAEEPROM_FastProgramByte:
 678              	.LFB95:
1527:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 679              		.loc 1 1527 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              	.LVL96:
 684 0000 38B5     		push	{r3, r4, r5, lr}
 685              	.LCFI8:
 686              		.cfi_def_cfa_offset 16
 687              		.cfi_offset 3, -16
 688              		.cfi_offset 4, -12
 689              		.cfi_offset 5, -8
 690              		.cfi_offset 14, -4
 691 0002 0446     		mov	r4, r0
 692 0004 0D46     		mov	r5, r1
 693              	.LVL97:
1537:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 694              		.loc 1 1537 0
 695 0006 4CF25030 		movw	r0, #50000
 696              	.LVL98:
 697 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 698              	.LVL99:
1539:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 699              		.loc 1 1539 0
 700 000e 0346     		mov	r3, r0
 701 0010 50B9     		cbnz	r0, .L59
1542:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 702              		.loc 1 1542 0
 703 0012 064A     		ldr	r2, .L61
 704 0014 5368     		ldr	r3, [r2, #4]
 705 0016 23F48073 		bic	r3, r3, #256
 706 001a 5360     		str	r3, [r2, #4]
1569:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             
 707              		.loc 1 1569 0
 708 001c 2570     		strb	r5, [r4]
1572:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
 709              		.loc 1 1572 0
 710 001e 4CF25030 		movw	r0, #50000
ARM GAS  /tmp/cc9qRquU.s 			page 46


 711              	.LVL100:
 712 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 713              	.LVL101:
 714 0026 0346     		mov	r3, r0
 715              	.LVL102:
 716              	.L59:
1577:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 717              		.loc 1 1577 0
 718 0028 1846     		mov	r0, r3
 719 002a 38BD     		pop	{r3, r4, r5, pc}
 720              	.LVL103:
 721              	.L62:
 722              		.align	2
 723              	.L61:
 724 002c 003C0240 		.word	1073888256
 725              		.cfi_endproc
 726              	.LFE95:
 728              		.section	.text.FLASH_DATAEEPROM_FastProgramHalfWord,"ax",%progbits
 729              		.align	2
 730              		.thumb
 731              		.thumb_func
 733              	FLASH_DATAEEPROM_FastProgramHalfWord:
 734              	.LFB96:
1587:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 735              		.loc 1 1587 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 0
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 739              	.LVL104:
 740 0000 38B5     		push	{r3, r4, r5, lr}
 741              	.LCFI9:
 742              		.cfi_def_cfa_offset 16
 743              		.cfi_offset 3, -16
 744              		.cfi_offset 4, -12
 745              		.cfi_offset 5, -8
 746              		.cfi_offset 14, -4
 747 0002 0446     		mov	r4, r0
 748 0004 0D46     		mov	r5, r1
 749              	.LVL105:
1597:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 750              		.loc 1 1597 0
 751 0006 4CF25030 		movw	r0, #50000
 752              	.LVL106:
 753 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 754              	.LVL107:
1599:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 755              		.loc 1 1599 0
 756 000e 0346     		mov	r3, r0
 757 0010 50B9     		cbnz	r0, .L64
1602:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 758              		.loc 1 1602 0
 759 0012 064A     		ldr	r2, .L66
 760 0014 5368     		ldr	r3, [r2, #4]
 761 0016 23F48073 		bic	r3, r3, #256
 762 001a 5360     		str	r3, [r2, #4]
1637:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 763              		.loc 1 1637 0
ARM GAS  /tmp/cc9qRquU.s 			page 47


 764 001c 2580     		strh	r5, [r4]	@ movhi
1640:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
 765              		.loc 1 1640 0
 766 001e 4CF25030 		movw	r0, #50000
 767              	.LVL108:
 768 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 769              	.LVL109:
 770 0026 0346     		mov	r3, r0
 771              	.LVL110:
 772              	.L64:
1645:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 773              		.loc 1 1645 0
 774 0028 1846     		mov	r0, r3
 775 002a 38BD     		pop	{r3, r4, r5, pc}
 776              	.LVL111:
 777              	.L67:
 778              		.align	2
 779              	.L66:
 780 002c 003C0240 		.word	1073888256
 781              		.cfi_endproc
 782              	.LFE96:
 784              		.section	.text.FLASH_DATAEEPROM_FastProgramWord,"ax",%progbits
 785              		.align	2
 786              		.thumb
 787              		.thumb_func
 789              	FLASH_DATAEEPROM_FastProgramWord:
 790              	.LFB97:
1655:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 791              		.loc 1 1655 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795              	.LVL112:
 796 0000 38B5     		push	{r3, r4, r5, lr}
 797              	.LCFI10:
 798              		.cfi_def_cfa_offset 16
 799              		.cfi_offset 3, -16
 800              		.cfi_offset 4, -12
 801              		.cfi_offset 5, -8
 802              		.cfi_offset 14, -4
 803 0002 0446     		mov	r4, r0
 804 0004 0D46     		mov	r5, r1
 805              	.LVL113:
1662:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 806              		.loc 1 1662 0
 807 0006 4CF25030 		movw	r0, #50000
 808              	.LVL114:
 809 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 810              	.LVL115:
1664:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 811              		.loc 1 1664 0
 812 000e 0346     		mov	r3, r0
 813 0010 50B9     		cbnz	r0, .L69
1667:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 814              		.loc 1 1667 0
 815 0012 064A     		ldr	r2, .L71
 816 0014 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/cc9qRquU.s 			page 48


 817 0016 23F48073 		bic	r3, r3, #256
 818 001a 5360     		str	r3, [r2, #4]
1670:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 819              		.loc 1 1670 0
 820 001c 2560     		str	r5, [r4]
1673:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 821              		.loc 1 1673 0
 822 001e 4CF25030 		movw	r0, #50000
 823              	.LVL116:
 824 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 825              	.LVL117:
 826 0026 0346     		mov	r3, r0
 827              	.LVL118:
 828              	.L69:
1677:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 829              		.loc 1 1677 0
 830 0028 1846     		mov	r0, r3
 831 002a 38BD     		pop	{r3, r4, r5, pc}
 832              	.LVL119:
 833              	.L72:
 834              		.align	2
 835              	.L71:
 836 002c 003C0240 		.word	1073888256
 837              		.cfi_endproc
 838              	.LFE97:
 840              		.section	.text.HAL_FLASHEx_OBProgram,"ax",%progbits
 841              		.align	2
 842              		.global	HAL_FLASHEx_OBProgram
 843              		.thumb
 844              		.thumb_func
 846              	HAL_FLASHEx_OBProgram:
 847              	.LFB74:
 407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 848              		.loc 1 407 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              	.LVL120:
 411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 853              		.loc 1 411 0
 854 0000 294B     		ldr	r3, .L85
 855 0002 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 856 0004 012B     		cmp	r3, #1
 857 0006 4DD0     		beq	.L81
 407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 858              		.loc 1 407 0 discriminator 2
 859 0008 10B5     		push	{r4, lr}
 860              	.LCFI11:
 861              		.cfi_def_cfa_offset 8
 862              		.cfi_offset 4, -8
 863              		.cfi_offset 14, -4
 864 000a 0446     		mov	r4, r0
 411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 865              		.loc 1 411 0 discriminator 2
 866 000c 0122     		movs	r2, #1
 867 000e 264B     		ldr	r3, .L85
 868 0010 1A74     		strb	r2, [r3, #16]
ARM GAS  /tmp/cc9qRquU.s 			page 49


 417:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 869              		.loc 1 417 0 discriminator 2
 870 0012 0368     		ldr	r3, [r0]
 871 0014 13F0010F 		tst	r3, #1
 872 0018 11D0     		beq	.L82
 420:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 873              		.loc 1 420 0
 874 001a 4368     		ldr	r3, [r0, #4]
 875 001c 9342     		cmp	r3, r2
 876 001e 04D1     		bne	.L76
 423:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 877              		.loc 1 423 0
 878 0020 1146     		mov	r1, r2
 879 0022 FFF7FEFF 		bl	FLASH_OB_WRPConfig
 880              	.LVL121:
 881 0026 0346     		mov	r3, r0
 882              	.LVL122:
 883 0028 03E0     		b	.L77
 884              	.LVL123:
 885              	.L76:
 428:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 886              		.loc 1 428 0
 887 002a 0021     		movs	r1, #0
 888 002c FFF7FEFF 		bl	FLASH_OB_WRPConfig
 889              	.LVL124:
 890 0030 0346     		mov	r3, r0
 891              	.LVL125:
 892              	.L77:
 430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 893              		.loc 1 430 0
 894 0032 2BB1     		cbz	r3, .L75
 433:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 895              		.loc 1 433 0
 896 0034 0021     		movs	r1, #0
 897 0036 1C4A     		ldr	r2, .L85
 898 0038 1174     		strb	r1, [r2, #16]
 434:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 899              		.loc 1 434 0
 900 003a 1846     		mov	r0, r3
 901 003c 10BD     		pop	{r4, pc}
 902              	.LVL126:
 903              	.L82:
 408:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 904              		.loc 1 408 0
 905 003e 0123     		movs	r3, #1
 906              	.LVL127:
 907              	.L75:
 439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 908              		.loc 1 439 0
 909 0040 2268     		ldr	r2, [r4]
 910 0042 12F0020F 		tst	r2, #2
 911 0046 08D0     		beq	.L78
 441:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 912              		.loc 1 441 0
 913 0048 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 914 004a FFF7FEFF 		bl	FLASH_OB_RDPConfig
 915              	.LVL128:
ARM GAS  /tmp/cc9qRquU.s 			page 50


 442:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 916              		.loc 1 442 0
 917 004e 0346     		mov	r3, r0
 918 0050 18B1     		cbz	r0, .L78
 445:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 919              		.loc 1 445 0
 920 0052 0021     		movs	r1, #0
 921 0054 144A     		ldr	r2, .L85
 922 0056 1174     		strb	r1, [r2, #16]
 446:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 923              		.loc 1 446 0
 924 0058 10BD     		pop	{r4, pc}
 925              	.LVL129:
 926              	.L78:
 451:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 927              		.loc 1 451 0
 928 005a 2268     		ldr	r2, [r4]
 929 005c 12F0040F 		tst	r2, #4
 930 0060 0ED0     		beq	.L79
 453:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STOP_NORST,
 931              		.loc 1 453 0
 932 0062 A07B     		ldrb	r0, [r4, #14]	@ zero_extendqisi2
 933 0064 00F04002 		and	r2, r0, #64
 934 0068 00F02001 		and	r1, r0, #32
 935 006c 00F01000 		and	r0, r0, #16
 936 0070 FFF7FEFF 		bl	FLASH_OB_UserConfig
 937              	.LVL130:
 456:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 938              		.loc 1 456 0
 939 0074 0346     		mov	r3, r0
 940 0076 18B1     		cbz	r0, .L79
 459:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 941              		.loc 1 459 0
 942 0078 0021     		movs	r1, #0
 943 007a 0B4A     		ldr	r2, .L85
 944 007c 1174     		strb	r1, [r2, #16]
 460:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 945              		.loc 1 460 0
 946 007e 10BD     		pop	{r4, pc}
 947              	.LVL131:
 948              	.L79:
 465:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 949              		.loc 1 465 0
 950 0080 2268     		ldr	r2, [r4]
 951 0082 12F0080F 		tst	r2, #8
 952 0086 08D0     		beq	.L80
 467:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 953              		.loc 1 467 0
 954 0088 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 955 008a FFF7FEFF 		bl	FLASH_OB_BORConfig
 956              	.LVL132:
 468:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 957              		.loc 1 468 0
 958 008e 0346     		mov	r3, r0
 959 0090 18B1     		cbz	r0, .L80
 471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 960              		.loc 1 471 0
ARM GAS  /tmp/cc9qRquU.s 			page 51


 961 0092 0021     		movs	r1, #0
 962 0094 044A     		ldr	r2, .L85
 963 0096 1174     		strb	r1, [r2, #16]
 472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 964              		.loc 1 472 0
 965 0098 10BD     		pop	{r4, pc}
 966              	.LVL133:
 967              	.L80:
 476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 968              		.loc 1 476 0
 969 009a 0021     		movs	r1, #0
 970 009c 024A     		ldr	r2, .L85
 971 009e 1174     		strb	r1, [r2, #16]
 478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 972              		.loc 1 478 0
 973 00a0 1846     		mov	r0, r3
 974 00a2 10BD     		pop	{r4, pc}
 975              	.LVL134:
 976              	.L81:
 977              	.LCFI12:
 978              		.cfi_def_cfa_offset 0
 979              		.cfi_restore 4
 980              		.cfi_restore 14
 411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 981              		.loc 1 411 0
 982 00a4 0220     		movs	r0, #2
 983              	.LVL135:
 984 00a6 7047     		bx	lr
 985              	.L86:
 986              		.align	2
 987              	.L85:
 988 00a8 00000000 		.word	pFlash
 989              		.cfi_endproc
 990              	.LFE74:
 992              		.section	.text.HAL_FLASHEx_OBGetConfig,"ax",%progbits
 993              		.align	2
 994              		.global	HAL_FLASHEx_OBGetConfig
 995              		.thumb
 996              		.thumb_func
 998              	HAL_FLASHEx_OBGetConfig:
 999              	.LFB75:
 489:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 1000              		.loc 1 489 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 0
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 1004              	.LVL136:
 1005 0000 10B5     		push	{r4, lr}
 1006              	.LCFI13:
 1007              		.cfi_def_cfa_offset 8
 1008              		.cfi_offset 4, -8
 1009              		.cfi_offset 14, -4
 1010 0002 0446     		mov	r4, r0
 490:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1011              		.loc 1 490 0
 1012 0004 0F23     		movs	r3, #15
 1013 0006 0360     		str	r3, [r0]
ARM GAS  /tmp/cc9qRquU.s 			page 52


 493:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1014              		.loc 1 493 0
 1015 0008 064B     		ldr	r3, .L89
 1016 000a 1B6A     		ldr	r3, [r3, #32]
 1017 000c 8360     		str	r3, [r0, #8]
 523:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1018              		.loc 1 523 0
 1019 000e FFF7FEFF 		bl	FLASH_OB_GetRDP
 1020              	.LVL137:
 1021 0012 2073     		strb	r0, [r4, #12]
 526:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1022              		.loc 1 526 0
 1023 0014 FFF7FEFF 		bl	FLASH_OB_GetUser
 1024              	.LVL138:
 1025 0018 A073     		strb	r0, [r4, #14]
 529:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1026              		.loc 1 529 0
 1027 001a FFF7FEFF 		bl	FLASH_OB_GetBOR
 1028              	.LVL139:
 1029 001e 6073     		strb	r0, [r4, #13]
 1030 0020 10BD     		pop	{r4, pc}
 1031              	.LVL140:
 1032              	.L90:
 1033 0022 00BF     		.align	2
 1034              	.L89:
 1035 0024 003C0240 		.word	1073888256
 1036              		.cfi_endproc
 1037              	.LFE75:
 1039              		.section	.text.HAL_FLASHEx_AdvOBProgram,"ax",%progbits
 1040              		.align	2
 1041              		.global	HAL_FLASHEx_AdvOBProgram
 1042              		.thumb
 1043              		.thumb_func
 1045              	HAL_FLASHEx_AdvOBProgram:
 1046              	.LFB76:
 543:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1047              		.loc 1 543 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051              	.LVL141:
 1052 0000 08B5     		push	{r3, lr}
 1053              	.LCFI14:
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 3, -8
 1056              		.cfi_offset 14, -4
 1057              	.LVL142:
 552:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1058              		.loc 1 552 0
 1059 0002 0368     		ldr	r3, [r0]
 1060 0004 13F0010F 		tst	r3, #1
 1061 0008 0AD0     		beq	.L94
 556:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1062              		.loc 1 556 0
 1063 000a 4368     		ldr	r3, [r0, #4]
 1064 000c 012B     		cmp	r3, #1
 1065 000e 03D1     		bne	.L93
ARM GAS  /tmp/cc9qRquU.s 			page 53


 559:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK)
 1066              		.loc 1 559 0
 1067 0010 0121     		movs	r1, #1
 1068 0012 FFF7FEFF 		bl	FLASH_OB_PCROPConfig
 1069              	.LVL143:
 1070 0016 08BD     		pop	{r3, pc}
 1071              	.LVL144:
 1072              	.L93:
 568:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK)
 1073              		.loc 1 568 0
 1074 0018 0021     		movs	r1, #0
 1075 001a FFF7FEFF 		bl	FLASH_OB_PCROPConfig
 1076              	.LVL145:
 1077 001e 08BD     		pop	{r3, pc}
 1078              	.LVL146:
 1079              	.L94:
 544:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1080              		.loc 1 544 0
 1081 0020 0120     		movs	r0, #1
 1082              	.LVL147:
 589:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1083              		.loc 1 589 0
 1084 0022 08BD     		pop	{r3, pc}
 1085              		.cfi_endproc
 1086              	.LFE76:
 1088              		.section	.text.HAL_FLASHEx_AdvOBGetConfig,"ax",%progbits
 1089              		.align	2
 1090              		.global	HAL_FLASHEx_AdvOBGetConfig
 1091              		.thumb
 1092              		.thumb_func
 1094              	HAL_FLASHEx_AdvOBGetConfig:
 1095              	.LFB77:
 600:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->OptionType = 0U;
 1096              		.loc 1 600 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              		@ link register save eliminated.
 1101              	.LVL148:
 605:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1102              		.loc 1 605 0
 1103 0000 0123     		movs	r3, #1
 1104 0002 0360     		str	r3, [r0]
 608:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1105              		.loc 1 608 0
 1106 0004 0749     		ldr	r1, .L97
 1107 0006 CB69     		ldr	r3, [r1, #28]
 1108 0008 03F48072 		and	r2, r3, #256
 1109              	.LVL149:
 1110              	.LBB4:
 1111              	.LBB5:
 1112              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
ARM GAS  /tmp/cc9qRquU.s 			page 54


   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
ARM GAS  /tmp/cc9qRquU.s 			page 55


  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
ARM GAS  /tmp/cc9qRquU.s 			page 56


 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc9qRquU.s 			page 57


 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
ARM GAS  /tmp/cc9qRquU.s 			page 58


 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc9qRquU.s 			page 59


 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc9qRquU.s 			page 60


 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc9qRquU.s 			page 61


 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
ARM GAS  /tmp/cc9qRquU.s 			page 62


 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
ARM GAS  /tmp/cc9qRquU.s 			page 63


 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  /tmp/cc9qRquU.s 			page 64


 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  /tmp/cc9qRquU.s 			page 65


 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc9qRquU.s 			page 66


 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
ARM GAS  /tmp/cc9qRquU.s 			page 67


 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc9qRquU.s 			page 68


 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc9qRquU.s 			page 69


 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/cc9qRquU.s 			page 70


 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc9qRquU.s 			page 71


 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1113              		.loc 2 988 0
 1114 000c 4FF48073 		mov	r3, #256
 1115              		.syntax unified
 1116              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1117 0010 93FAA3F3 		rbit r3, r3
 1118              	@ 0 "" 2
 1119              	.LVL150:
 1120              		.thumb
 1121              		.syntax unified
 1122              	.LBE5:
 1123              	.LBE4:
 608:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1124              		.loc 1 608 0
 1125 0014 B3FA83F3 		clz	r3, r3
 1126 0018 22FA03F3 		lsr	r3, r2, r3
 1127 001c 4360     		str	r3, [r0, #4]
 611:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1128              		.loc 1 611 0
 1129 001e 0B6A     		ldr	r3, [r1, #32]
 1130 0020 8360     		str	r3, [r0, #8]
 1131 0022 7047     		bx	lr
 1132              	.L98:
 1133              		.align	2
 1134              	.L97:
 1135 0024 003C0240 		.word	1073888256
 1136              		.cfi_endproc
 1137              	.LFE77:
 1139              		.section	.text.HAL_FLASHEx_OB_SelectPCROP,"ax",%progbits
 1140              		.align	2
 1141              		.global	HAL_FLASHEx_OB_SelectPCROP
 1142              		.thumb
 1143              		.thumb_func
 1145              	HAL_FLASHEx_OB_SelectPCROP:
 1146              	.LFB78:
 643:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1147              		.loc 1 643 0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151 0000 08B5     		push	{r3, lr}
 1152              	.LCFI15:
 1153              		.cfi_def_cfa_offset 8
 1154              		.cfi_offset 3, -8
ARM GAS  /tmp/cc9qRquU.s 			page 72


 1155              		.cfi_offset 14, -4
 1156              	.LVL151:
 650:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1157              		.loc 1 650 0
 1158 0002 4CF25030 		movw	r0, #50000
 1159 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1160              	.LVL152:
 653:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1161              		.loc 1 653 0
 1162 000a 0C4B     		ldr	r3, .L102
 1163 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1164              	.LVL153:
 656:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1165              		.loc 1 656 0
 1166 000e 43F48073 		orr	r3, r3, #256
 1167              	.LVL154:
 659:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 1168              		.loc 1 659 0
 1169 0012 83F47F42 		eor	r2, r3, #65280
 1170 0016 82F0FF02 		eor	r2, r2, #255
 1171              	.LVL155:
 660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1172              		.loc 1 660 0
 1173 001a 43EA0243 		orr	r3, r3, r2, lsl #16
 1174              	.LVL156:
 662:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {         
 1175              		.loc 1 662 0
 1176 001e 0246     		mov	r2, r0
 1177              	.LVL157:
 1178 0020 48B9     		cbnz	r0, .L100
 665:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1179              		.loc 1 665 0
 1180 0022 0021     		movs	r1, #0
 1181 0024 064A     		ldr	r2, .L102+4
 1182 0026 5161     		str	r1, [r2, #20]
 668:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 1183              		.loc 1 668 0
 1184 0028 044A     		ldr	r2, .L102
 1185 002a 1360     		str	r3, [r2]
 671:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1186              		.loc 1 671 0
 1187 002c 4CF25030 		movw	r0, #50000
 1188              	.LVL158:
 1189 0030 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1190              	.LVL159:
 1191 0034 0246     		mov	r2, r0
 1192              	.LVL160:
 1193              	.L100:
 676:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1194              		.loc 1 676 0
 1195 0036 1046     		mov	r0, r2
 1196 0038 08BD     		pop	{r3, pc}
 1197              	.L103:
 1198 003a 00BF     		.align	2
 1199              	.L102:
 1200 003c 0000F81F 		.word	536346624
 1201 0040 00000000 		.word	pFlash
ARM GAS  /tmp/cc9qRquU.s 			page 73


 1202              		.cfi_endproc
 1203              	.LFE78:
 1205              		.section	.text.HAL_FLASHEx_OB_DeSelectPCROP,"ax",%progbits
 1206              		.align	2
 1207              		.global	HAL_FLASHEx_OB_DeSelectPCROP
 1208              		.thumb
 1209              		.thumb_func
 1211              	HAL_FLASHEx_OB_DeSelectPCROP:
 1212              	.LFB79:
 686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1213              		.loc 1 686 0
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 0
 1216              		@ frame_needed = 0, uses_anonymous_args = 0
 1217 0000 08B5     		push	{r3, lr}
 1218              	.LCFI16:
 1219              		.cfi_def_cfa_offset 8
 1220              		.cfi_offset 3, -8
 1221              		.cfi_offset 14, -4
 1222              	.LVL161:
 693:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1223              		.loc 1 693 0
 1224 0002 4CF25030 		movw	r0, #50000
 1225 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1226              	.LVL162:
 696:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1227              		.loc 1 696 0
 1228 000a 0B4B     		ldr	r3, .L107
 1229 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1230 000e DBB2     		uxtb	r3, r3
 1231              	.LVL163:
 702:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 1232              		.loc 1 702 0
 1233 0010 83F47F42 		eor	r2, r3, #65280
 1234 0014 82F0FF02 		eor	r2, r2, #255
 1235              	.LVL164:
 703:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1236              		.loc 1 703 0
 1237 0018 43EA0243 		orr	r3, r3, r2, lsl #16
 1238              	.LVL165:
 705:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {         
 1239              		.loc 1 705 0
 1240 001c 0246     		mov	r2, r0
 1241              	.LVL166:
 1242 001e 48B9     		cbnz	r0, .L105
 708:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1243              		.loc 1 708 0
 1244 0020 0021     		movs	r1, #0
 1245 0022 064A     		ldr	r2, .L107+4
 1246 0024 5161     		str	r1, [r2, #20]
 711:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 1247              		.loc 1 711 0
 1248 0026 044A     		ldr	r2, .L107
 1249 0028 1360     		str	r3, [r2]
 714:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1250              		.loc 1 714 0
 1251 002a 4CF25030 		movw	r0, #50000
ARM GAS  /tmp/cc9qRquU.s 			page 74


 1252              	.LVL167:
 1253 002e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1254              	.LVL168:
 1255 0032 0246     		mov	r2, r0
 1256              	.LVL169:
 1257              	.L105:
 719:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1258              		.loc 1 719 0
 1259 0034 1046     		mov	r0, r2
 1260 0036 08BD     		pop	{r3, pc}
 1261              	.L108:
 1262              		.align	2
 1263              	.L107:
 1264 0038 0000F81F 		.word	536346624
 1265 003c 00000000 		.word	pFlash
 1266              		.cfi_endproc
 1267              	.LFE79:
 1269              		.section	.text.HAL_FLASHEx_DATAEEPROM_Unlock,"ax",%progbits
 1270              		.align	2
 1271              		.global	HAL_FLASHEx_DATAEEPROM_Unlock
 1272              		.thumb
 1273              		.thumb_func
 1275              	HAL_FLASHEx_DATAEEPROM_Unlock:
 1276              	.LFB80:
 752:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 1277              		.loc 1 752 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 0
 1280              		@ frame_needed = 0, uses_anonymous_args = 0
 1281              		@ link register save eliminated.
 753:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
 1282              		.loc 1 753 0
 1283 0000 064B     		ldr	r3, .L112
 1284 0002 5B68     		ldr	r3, [r3, #4]
 1285 0004 13F0010F 		tst	r3, #1
 1286 0008 06D0     		beq	.L111
 756:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     FLASH->PEKEYR = FLASH_PEKEY2;
 1287              		.loc 1 756 0
 1288 000a 044B     		ldr	r3, .L112
 1289 000c 044A     		ldr	r2, .L112+4
 1290 000e DA60     		str	r2, [r3, #12]
 757:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1291              		.loc 1 757 0
 1292 0010 044A     		ldr	r2, .L112+8
 1293 0012 DA60     		str	r2, [r3, #12]
 763:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1294              		.loc 1 763 0
 1295 0014 0020     		movs	r0, #0
 1296 0016 7047     		bx	lr
 1297              	.L111:
 761:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1298              		.loc 1 761 0
 1299 0018 0120     		movs	r0, #1
 764:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1300              		.loc 1 764 0
 1301 001a 7047     		bx	lr
 1302              	.L113:
ARM GAS  /tmp/cc9qRquU.s 			page 75


 1303              		.align	2
 1304              	.L112:
 1305 001c 003C0240 		.word	1073888256
 1306 0020 EFCDAB89 		.word	-1985229329
 1307 0024 05040302 		.word	33752069
 1308              		.cfi_endproc
 1309              	.LFE80:
 1311              		.section	.text.HAL_FLASHEx_DATAEEPROM_Lock,"ax",%progbits
 1312              		.align	2
 1313              		.global	HAL_FLASHEx_DATAEEPROM_Lock
 1314              		.thumb
 1315              		.thumb_func
 1317              	HAL_FLASHEx_DATAEEPROM_Lock:
 1318              	.LFB81:
 771:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
 1319              		.loc 1 771 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 773:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1324              		.loc 1 773 0
 1325 0000 034A     		ldr	r2, .L115
 1326 0002 5368     		ldr	r3, [r2, #4]
 1327 0004 43F00103 		orr	r3, r3, #1
 1328 0008 5360     		str	r3, [r2, #4]
 776:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1329              		.loc 1 776 0
 1330 000a 0020     		movs	r0, #0
 1331 000c 7047     		bx	lr
 1332              	.L116:
 1333 000e 00BF     		.align	2
 1334              	.L115:
 1335 0010 003C0240 		.word	1073888256
 1336              		.cfi_endproc
 1337              	.LFE81:
 1339              		.section	.text.HAL_FLASHEx_DATAEEPROM_Erase,"ax",%progbits
 1340              		.align	2
 1341              		.global	HAL_FLASHEx_DATAEEPROM_Erase
 1342              		.thumb
 1343              		.thumb_func
 1345              	HAL_FLASHEx_DATAEEPROM_Erase:
 1346              	.LFB82:
 791:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1347              		.loc 1 791 0
 1348              		.cfi_startproc
 1349              		@ args = 0, pretend = 0, frame = 0
 1350              		@ frame_needed = 0, uses_anonymous_args = 0
 1351              	.LVL170:
 1352 0000 38B5     		push	{r3, r4, r5, lr}
 1353              	.LCFI17:
 1354              		.cfi_def_cfa_offset 16
 1355              		.cfi_offset 3, -16
 1356              		.cfi_offset 4, -12
 1357              		.cfi_offset 5, -8
 1358              		.cfi_offset 14, -4
 1359 0002 0446     		mov	r4, r0
ARM GAS  /tmp/cc9qRquU.s 			page 76


 1360 0004 0D46     		mov	r5, r1
 1361              	.LVL171:
 799:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1362              		.loc 1 799 0
 1363 0006 4CF25030 		movw	r0, #50000
 1364              	.LVL172:
 1365 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1366              	.LVL173:
 801:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1367              		.loc 1 801 0
 1368 000e 0346     		mov	r3, r0
 1369 0010 88B9     		cbnz	r0, .L118
 804:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1370              		.loc 1 804 0
 1371 0012 0022     		movs	r2, #0
 1372 0014 094B     		ldr	r3, .L123
 1373 0016 5A61     		str	r2, [r3, #20]
 806:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1374              		.loc 1 806 0
 1375 0018 022C     		cmp	r4, #2
 1376 001a 00D1     		bne	.L119
 809:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1377              		.loc 1 809 0
 1378 001c 2A60     		str	r2, [r5]
 1379              	.L119:
 812:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1380              		.loc 1 812 0
 1381 001e 012C     		cmp	r4, #1
 1382 0020 01D1     		bne	.L120
 815:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1383              		.loc 1 815 0
 1384 0022 0023     		movs	r3, #0
 1385 0024 2B80     		strh	r3, [r5]	@ movhi
 1386              	.L120:
 818:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1387              		.loc 1 818 0
 1388 0026 0CB9     		cbnz	r4, .L121
 821:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1389              		.loc 1 821 0
 1390 0028 0023     		movs	r3, #0
 1391 002a 2B70     		strb	r3, [r5]
 1392              	.L121:
 824:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1393              		.loc 1 824 0
 1394 002c 4CF25030 		movw	r0, #50000
 1395              	.LVL174:
 1396 0030 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1397              	.LVL175:
 1398 0034 0346     		mov	r3, r0
 1399              	.LVL176:
 1400              	.L118:
 829:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1401              		.loc 1 829 0
 1402 0036 1846     		mov	r0, r3
 1403 0038 38BD     		pop	{r3, r4, r5, pc}
 1404              	.LVL177:
 1405              	.L124:
ARM GAS  /tmp/cc9qRquU.s 			page 77


 1406 003a 00BF     		.align	2
 1407              	.L123:
 1408 003c 00000000 		.word	pFlash
 1409              		.cfi_endproc
 1410              	.LFE82:
 1412              		.section	.text.HAL_FLASHEx_DATAEEPROM_Program,"ax",%progbits
 1413              		.align	2
 1414              		.global	HAL_FLASHEx_DATAEEPROM_Program
 1415              		.thumb
 1416              		.thumb_func
 1418              	HAL_FLASHEx_DATAEEPROM_Program:
 1419              	.LFB83:
 849:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1420              		.loc 1 849 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 1424              	.LVL178:
 853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1425              		.loc 1 853 0
 1426 0000 254B     		ldr	r3, .L137
 1427 0002 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1428 0004 012B     		cmp	r3, #1
 1429 0006 44D0     		beq	.L133
 849:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1430              		.loc 1 849 0 discriminator 2
 1431 0008 70B5     		push	{r4, r5, r6, lr}
 1432              	.LCFI18:
 1433              		.cfi_def_cfa_offset 16
 1434              		.cfi_offset 4, -16
 1435              		.cfi_offset 5, -12
 1436              		.cfi_offset 6, -8
 1437              		.cfi_offset 14, -4
 1438 000a 1646     		mov	r6, r2
 1439 000c 0D46     		mov	r5, r1
 1440 000e 0446     		mov	r4, r0
 853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1441              		.loc 1 853 0 discriminator 2
 1442 0010 0122     		movs	r2, #1
 1443              	.LVL179:
 1444 0012 214B     		ldr	r3, .L137
 1445 0014 1A74     		strb	r2, [r3, #16]
 859:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1446              		.loc 1 859 0 discriminator 2
 1447 0016 4CF25030 		movw	r0, #50000
 1448              	.LVL180:
 1449 001a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1450              	.LVL181:
 861:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1451              		.loc 1 861 0 discriminator 2
 1452 001e 0346     		mov	r3, r0
 1453 0020 90BB     		cbnz	r0, .L127
 864:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1454              		.loc 1 864 0
 1455 0022 0022     		movs	r2, #0
 1456 0024 1C4B     		ldr	r3, .L137
 1457 0026 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/cc9qRquU.s 			page 78


 866:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1458              		.loc 1 866 0
 1459 0028 022C     		cmp	r4, #2
 1460 002a 05D1     		bne	.L128
 869:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1461              		.loc 1 869 0
 1462 002c 3146     		mov	r1, r6
 1463 002e 2846     		mov	r0, r5
 1464              	.LVL182:
 1465 0030 FFF7FEFF 		bl	FLASH_DATAEEPROM_ProgramWord
 1466              	.LVL183:
 1467 0034 0346     		mov	r3, r0
 1468              	.LVL184:
 1469 0036 27E0     		b	.L127
 1470              	.LVL185:
 1471              	.L128:
 871:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1472              		.loc 1 871 0
 1473 0038 012C     		cmp	r4, #1
 1474 003a 05D1     		bne	.L129
 874:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1475              		.loc 1 874 0
 1476 003c B1B2     		uxth	r1, r6
 1477 003e 2846     		mov	r0, r5
 1478              	.LVL186:
 1479 0040 FFF7FEFF 		bl	FLASH_DATAEEPROM_ProgramHalfWord
 1480              	.LVL187:
 1481 0044 0346     		mov	r3, r0
 1482              	.LVL188:
 1483 0046 1FE0     		b	.L127
 1484              	.LVL189:
 1485              	.L129:
 876:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1486              		.loc 1 876 0
 1487 0048 2CB9     		cbnz	r4, .L130
 879:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1488              		.loc 1 879 0
 1489 004a F1B2     		uxtb	r1, r6
 1490 004c 2846     		mov	r0, r5
 1491              	.LVL190:
 1492 004e FFF7FEFF 		bl	FLASH_DATAEEPROM_ProgramByte
 1493              	.LVL191:
 1494 0052 0346     		mov	r3, r0
 1495              	.LVL192:
 1496 0054 18E0     		b	.L127
 1497              	.LVL193:
 1498              	.L130:
 881:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1499              		.loc 1 881 0
 1500 0056 042C     		cmp	r4, #4
 1501 0058 05D1     		bne	.L131
 884:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1502              		.loc 1 884 0
 1503 005a F1B2     		uxtb	r1, r6
 1504 005c 2846     		mov	r0, r5
 1505              	.LVL194:
 1506 005e FFF7FEFF 		bl	FLASH_DATAEEPROM_FastProgramByte
ARM GAS  /tmp/cc9qRquU.s 			page 79


 1507              	.LVL195:
 1508 0062 0346     		mov	r3, r0
 1509              	.LVL196:
 1510 0064 10E0     		b	.L127
 1511              	.LVL197:
 1512              	.L131:
 886:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1513              		.loc 1 886 0
 1514 0066 082C     		cmp	r4, #8
 1515 0068 05D1     		bne	.L132
 889:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }    
 1516              		.loc 1 889 0
 1517 006a B1B2     		uxth	r1, r6
 1518 006c 2846     		mov	r0, r5
 1519              	.LVL198:
 1520 006e FFF7FEFF 		bl	FLASH_DATAEEPROM_FastProgramHalfWord
 1521              	.LVL199:
 1522 0072 0346     		mov	r3, r0
 1523              	.LVL200:
 1524 0074 08E0     		b	.L127
 1525              	.LVL201:
 1526              	.L132:
 891:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1527              		.loc 1 891 0
 1528 0076 102C     		cmp	r4, #16
 1529 0078 05D1     		bne	.L134
 894:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1530              		.loc 1 894 0
 1531 007a 3146     		mov	r1, r6
 1532 007c 2846     		mov	r0, r5
 1533              	.LVL202:
 1534 007e FFF7FEFF 		bl	FLASH_DATAEEPROM_FastProgramWord
 1535              	.LVL203:
 1536 0082 0346     		mov	r3, r0
 1537              	.LVL204:
 1538 0084 00E0     		b	.L127
 1539              	.LVL205:
 1540              	.L134:
 898:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1541              		.loc 1 898 0
 1542 0086 0123     		movs	r3, #1
 1543              	.LVL206:
 1544              	.L127:
 904:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1545              		.loc 1 904 0
 1546 0088 0021     		movs	r1, #0
 1547 008a 034A     		ldr	r2, .L137
 1548 008c 1174     		strb	r1, [r2, #16]
 906:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1549              		.loc 1 906 0
 1550 008e 1846     		mov	r0, r3
 1551 0090 70BD     		pop	{r4, r5, r6, pc}
 1552              	.LVL207:
 1553              	.L133:
 1554              	.LCFI19:
 1555              		.cfi_def_cfa_offset 0
 1556              		.cfi_restore 4
ARM GAS  /tmp/cc9qRquU.s 			page 80


 1557              		.cfi_restore 5
 1558              		.cfi_restore 6
 1559              		.cfi_restore 14
 853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1560              		.loc 1 853 0
 1561 0092 0220     		movs	r0, #2
 1562              	.LVL208:
 1563 0094 7047     		bx	lr
 1564              	.L138:
 1565 0096 00BF     		.align	2
 1566              	.L137:
 1567 0098 00000000 		.word	pFlash
 1568              		.cfi_endproc
 1569              	.LFE83:
 1571              		.section	.text.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram,"ax",%progbits
 1572              		.align	2
 1573              		.global	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram
 1574              		.thumb
 1575              		.thumb_func
 1577              	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram:
 1578              	.LFB84:
 914:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 1579              		.loc 1 914 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 0
 1582              		@ frame_needed = 0, uses_anonymous_args = 0
 1583              		@ link register save eliminated.
 915:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1584              		.loc 1 915 0
 1585 0000 024A     		ldr	r2, .L140
 1586 0002 5368     		ldr	r3, [r2, #4]
 1587 0004 43F48073 		orr	r3, r3, #256
 1588 0008 5360     		str	r3, [r2, #4]
 1589 000a 7047     		bx	lr
 1590              	.L141:
 1591              		.align	2
 1592              	.L140:
 1593 000c 003C0240 		.word	1073888256
 1594              		.cfi_endproc
 1595              	.LFE84:
 1597              		.section	.text.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram,"ax",%progbits
 1598              		.align	2
 1599              		.global	HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram
 1600              		.thumb
 1601              		.thumb_func
 1603              	HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram:
 1604              	.LFB85:
 923:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 1605              		.loc 1 923 0
 1606              		.cfi_startproc
 1607              		@ args = 0, pretend = 0, frame = 0
 1608              		@ frame_needed = 0, uses_anonymous_args = 0
 1609              		@ link register save eliminated.
 924:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1610              		.loc 1 924 0
 1611 0000 024A     		ldr	r2, .L143
 1612 0002 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/cc9qRquU.s 			page 81


 1613 0004 23F48073 		bic	r3, r3, #256
 1614 0008 5360     		str	r3, [r2, #4]
 1615 000a 7047     		bx	lr
 1616              	.L144:
 1617              		.align	2
 1618              	.L143:
 1619 000c 003C0240 		.word	1073888256
 1620              		.cfi_endproc
 1621              	.LFE85:
 1623              		.section	.text.FLASH_PageErase,"ax",%progbits
 1624              		.align	2
 1625              		.global	FLASH_PageErase
 1626              		.thumb
 1627              		.thumb_func
 1629              	FLASH_PageErase:
 1630              	.LFB101:
1820:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1821:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1822:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
1823:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1824:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1825:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1826:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
1827:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1828:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1829:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASH
1830:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
1831:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1832:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1833:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1834:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASH_Private_Functions
1835:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
1836:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
1837:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1838:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1839:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Erases a specified page in program memory.
1840:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  PageAddress The page address in program memory to be erased.
1841:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   A Page is erased in the Program memory only if the address to load 
1842:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
1843:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1844:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1845:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void FLASH_PageErase(uint32_t PageAddress)
1846:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 1631              		.loc 1 1846 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 1636              	.LVL209:
1847:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Clean the error context */
1848:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 1637              		.loc 1 1848 0
 1638 0000 0021     		movs	r1, #0
 1639 0002 074B     		ldr	r3, .L146
 1640 0004 5961     		str	r1, [r3, #20]
1849:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1850:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Set the ERASE bit */
ARM GAS  /tmp/cc9qRquU.s 			page 82


1851:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 1641              		.loc 1 1851 0
 1642 0006 074B     		ldr	r3, .L146+4
 1643 0008 5A68     		ldr	r2, [r3, #4]
 1644 000a 42F40072 		orr	r2, r2, #512
 1645 000e 5A60     		str	r2, [r3, #4]
1852:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Set PROG bit */
1854:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 1646              		.loc 1 1854 0
 1647 0010 5A68     		ldr	r2, [r3, #4]
 1648 0012 42F00802 		orr	r2, r2, #8
 1649 0016 5A60     		str	r2, [r3, #4]
1855:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1856:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Write 00000000h to the first word of the program page to erase */
1857:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 1650              		.loc 1 1857 0
 1651 0018 20F0FF00 		bic	r0, r0, #255
 1652              	.LVL210:
 1653 001c 0160     		str	r1, [r0]
 1654 001e 7047     		bx	lr
 1655              	.L147:
 1656              		.align	2
 1657              	.L146:
 1658 0020 00000000 		.word	pFlash
 1659 0024 003C0240 		.word	1073888256
 1660              		.cfi_endproc
 1661              	.LFE101:
 1663              		.section	.text.HAL_FLASHEx_Erase,"ax",%progbits
 1664              		.align	2
 1665              		.global	HAL_FLASHEx_Erase
 1666              		.thumb
 1667              		.thumb_func
 1669              	HAL_FLASHEx_Erase:
 1670              	.LFB72:
 188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1671              		.loc 1 188 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 0
 1674              		@ frame_needed = 0, uses_anonymous_args = 0
 1675              	.LVL211:
 193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1676              		.loc 1 193 0
 1677 0000 1B4B     		ldr	r3, .L157
 1678 0002 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1679 0004 012B     		cmp	r3, #1
 1680 0006 31D0     		beq	.L154
 188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1681              		.loc 1 188 0 discriminator 2
 1682 0008 70B5     		push	{r4, r5, r6, lr}
 1683              	.LCFI20:
 1684              		.cfi_def_cfa_offset 16
 1685              		.cfi_offset 4, -16
 1686              		.cfi_offset 5, -12
 1687              		.cfi_offset 6, -8
 1688              		.cfi_offset 14, -4
 1689 000a 0E46     		mov	r6, r1
ARM GAS  /tmp/cc9qRquU.s 			page 83


 1690 000c 0546     		mov	r5, r0
 193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1691              		.loc 1 193 0 discriminator 2
 1692 000e 0122     		movs	r2, #1
 1693 0010 174B     		ldr	r3, .L157
 1694 0012 1A74     		strb	r2, [r3, #16]
 196:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1695              		.loc 1 196 0 discriminator 2
 1696 0014 4CF25030 		movw	r0, #50000
 1697              	.LVL212:
 1698 0018 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1699              	.LVL213:
 198:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1700              		.loc 1 198 0 discriminator 2
 1701 001c 0246     		mov	r2, r0
 1702 001e 00BB     		cbnz	r0, .L150
 201:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1703              		.loc 1 201 0
 1704 0020 4FF0FF33 		mov	r3, #-1
 1705 0024 3360     		str	r3, [r6]
 240:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 1706              		.loc 1 240 0
 1707 0026 6C68     		ldr	r4, [r5, #4]
 1708              	.LVL214:
 1709 0028 15E0     		b	.L151
 1710              	.LVL215:
 1711              	.L153:
 244:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1712              		.loc 1 244 0
 1713 002a 2046     		mov	r0, r4
 1714 002c FFF7FEFF 		bl	FLASH_PageErase
 1715              	.LVL216:
 247:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1716              		.loc 1 247 0
 1717 0030 4CF25030 		movw	r0, #50000
 1718 0034 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1719              	.LVL217:
 250:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 1720              		.loc 1 250 0
 1721 0038 0E4B     		ldr	r3, .L157+4
 1722 003a 5A68     		ldr	r2, [r3, #4]
 1723 003c 22F00802 		bic	r2, r2, #8
 1724 0040 5A60     		str	r2, [r3, #4]
 251:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1725              		.loc 1 251 0
 1726 0042 5A68     		ldr	r2, [r3, #4]
 1727 0044 22F40072 		bic	r2, r2, #512
 1728 0048 5A60     		str	r2, [r3, #4]
 253:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 1729              		.loc 1 253 0
 1730 004a 0246     		mov	r2, r0
 1731 004c 08B1     		cbz	r0, .L152
 256:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         break;
 1732              		.loc 1 256 0
 1733 004e 3460     		str	r4, [r6]
 257:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 1734              		.loc 1 257 0
ARM GAS  /tmp/cc9qRquU.s 			page 84


 1735 0050 07E0     		b	.L150
 1736              	.L152:
 242:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1737              		.loc 1 242 0
 1738 0052 04F58074 		add	r4, r4, #256
 1739              	.LVL218:
 1740              	.L151:
 241:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address += FLASH_PAGE_SIZE)
 1741              		.loc 1 241 0 discriminator 1
 1742 0056 A968     		ldr	r1, [r5, #8]
 1743 0058 6B68     		ldr	r3, [r5, #4]
 1744 005a 03EB0123 		add	r3, r3, r1, lsl #8
 240:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 1745              		.loc 1 240 0 discriminator 1
 1746 005e 9C42     		cmp	r4, r3
 1747 0060 E3D3     		bcc	.L153
 1748              	.LVL219:
 1749              	.L150:
 263:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1750              		.loc 1 263 0
 1751 0062 0021     		movs	r1, #0
 1752 0064 024B     		ldr	r3, .L157
 1753 0066 1974     		strb	r1, [r3, #16]
 265:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1754              		.loc 1 265 0
 1755 0068 1046     		mov	r0, r2
 1756 006a 70BD     		pop	{r4, r5, r6, pc}
 1757              	.LVL220:
 1758              	.L154:
 1759              	.LCFI21:
 1760              		.cfi_def_cfa_offset 0
 1761              		.cfi_restore 4
 1762              		.cfi_restore 5
 1763              		.cfi_restore 6
 1764              		.cfi_restore 14
 193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1765              		.loc 1 193 0
 1766 006c 0220     		movs	r0, #2
 1767              	.LVL221:
 1768 006e 7047     		bx	lr
 1769              	.L158:
 1770              		.align	2
 1771              	.L157:
 1772 0070 00000000 		.word	pFlash
 1773 0074 003C0240 		.word	1073888256
 1774              		.cfi_endproc
 1775              	.LFE72:
 1777              		.section	.text.HAL_FLASHEx_Erase_IT,"ax",%progbits
 1778              		.align	2
 1779              		.global	HAL_FLASHEx_Erase_IT
 1780              		.thumb
 1781              		.thumb_func
 1783              	HAL_FLASHEx_Erase_IT:
 1784              	.LFB73:
 284:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1785              		.loc 1 284 0
 1786              		.cfi_startproc
ARM GAS  /tmp/cc9qRquU.s 			page 85


 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 1789              	.LVL222:
 1790 0000 38B5     		push	{r3, r4, r5, lr}
 1791              	.LCFI22:
 1792              		.cfi_def_cfa_offset 16
 1793              		.cfi_offset 3, -16
 1794              		.cfi_offset 4, -12
 1795              		.cfi_offset 5, -8
 1796              		.cfi_offset 14, -4
 1797              	.LVL223:
 288:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1798              		.loc 1 288 0
 1799 0002 164B     		ldr	r3, .L165
 1800 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1801 0006 13F0FF0F 		tst	r3, #255
 1802 000a 22D1     		bne	.L162
 300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1803              		.loc 1 300 0
 1804 000c 134B     		ldr	r3, .L165
 1805 000e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1806 0010 012B     		cmp	r3, #1
 1807 0012 20D0     		beq	.L163
 1808 0014 0546     		mov	r5, r0
 300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1809              		.loc 1 300 0 is_stmt 0 discriminator 2
 1810 0016 0122     		movs	r2, #1
 1811 0018 104B     		ldr	r3, .L165
 1812 001a 1A74     		strb	r2, [r3, #16]
 333:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1813              		.loc 1 333 0 is_stmt 1 discriminator 2
 1814 001c 4CF25030 		movw	r0, #50000
 1815              	.LVL224:
 1816 0020 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1817              	.LVL225:
 335:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1818              		.loc 1 335 0 discriminator 2
 1819 0024 0446     		mov	r4, r0
 1820 0026 80B9     		cbnz	r0, .L161
 338:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 1821              		.loc 1 338 0
 1822 0028 0D4A     		ldr	r2, .L165+4
 1823 002a 5368     		ldr	r3, [r2, #4]
 1824 002c 43F44033 		orr	r3, r3, #196608
 1825 0030 5360     		str	r3, [r2, #4]
 340:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.NbPagesToErase = pEraseInit->NbPages;
 1826              		.loc 1 340 0
 1827 0032 0A4B     		ldr	r3, .L165
 1828 0034 0122     		movs	r2, #1
 1829 0036 1A70     		strb	r2, [r3]
 341:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.Page = pEraseInit->PageAddress;
 1830              		.loc 1 341 0
 1831 0038 AA68     		ldr	r2, [r5, #8]
 1832 003a 5A60     		str	r2, [r3, #4]
 342:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1833              		.loc 1 342 0
 1834 003c 6A68     		ldr	r2, [r5, #4]
ARM GAS  /tmp/cc9qRquU.s 			page 86


 1835 003e DA60     		str	r2, [r3, #12]
 345:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1836              		.loc 1 345 0
 1837 0040 6868     		ldr	r0, [r5, #4]
 1838              	.LVL226:
 1839 0042 FFF7FEFF 		bl	FLASH_PageErase
 1840              	.LVL227:
 353:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1841              		.loc 1 353 0
 1842 0046 2046     		mov	r0, r4
 1843 0048 38BD     		pop	{r3, r4, r5, pc}
 1844              	.LVL228:
 1845              	.L161:
 350:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1846              		.loc 1 350 0
 1847 004a 0022     		movs	r2, #0
 1848 004c 034B     		ldr	r3, .L165
 1849 004e 1A74     		strb	r2, [r3, #16]
 1850 0050 38BD     		pop	{r3, r4, r5, pc}
 1851              	.LVL229:
 1852              	.L162:
 290:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1853              		.loc 1 290 0
 1854 0052 0120     		movs	r0, #1
 1855              	.LVL230:
 1856 0054 38BD     		pop	{r3, r4, r5, pc}
 1857              	.LVL231:
 1858              	.L163:
 300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1859              		.loc 1 300 0
 1860 0056 0220     		movs	r0, #2
 1861              	.LVL232:
 354:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1862              		.loc 1 354 0
 1863 0058 38BD     		pop	{r3, r4, r5, pc}
 1864              	.L166:
 1865 005a 00BF     		.align	2
 1866              	.L165:
 1867 005c 00000000 		.word	pFlash
 1868 0060 003C0240 		.word	1073888256
 1869              		.cfi_endproc
 1870              	.LFE73:
 1872              		.text
 1873              	.Letext0:
 1874              		.file 3 "/usr/bin/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1875              		.file 4 "/usr/bin/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1876              		.file 5 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xba.h"
 1877              		.file 6 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 1878              		.file 7 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 1879              		.file 8 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_flash.h"
 1880              		.file 9 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_flash_ex.h"
 1881              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
ARM GAS  /tmp/cc9qRquU.s 			page 87


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l1xx_hal_flash_ex.c
     /tmp/cc9qRquU.s:20     .text.FLASH_OB_GetUser:00000000 $t
     /tmp/cc9qRquU.s:24     .text.FLASH_OB_GetUser:00000000 FLASH_OB_GetUser
     /tmp/cc9qRquU.s:42     .text.FLASH_OB_GetUser:0000000c $d
     /tmp/cc9qRquU.s:47     .text.FLASH_OB_GetRDP:00000000 $t
     /tmp/cc9qRquU.s:51     .text.FLASH_OB_GetRDP:00000000 FLASH_OB_GetRDP
     /tmp/cc9qRquU.s:78     .text.FLASH_OB_GetRDP:00000014 $d
     /tmp/cc9qRquU.s:83     .text.FLASH_OB_GetBOR:00000000 $t
     /tmp/cc9qRquU.s:87     .text.FLASH_OB_GetBOR:00000000 FLASH_OB_GetBOR
     /tmp/cc9qRquU.s:103    .text.FLASH_OB_GetBOR:0000000c $d
     /tmp/cc9qRquU.s:108    .text.FLASH_OB_WRPConfigWRP1OrPCROP1:00000000 $t
     /tmp/cc9qRquU.s:112    .text.FLASH_OB_WRPConfigWRP1OrPCROP1:00000000 FLASH_OB_WRPConfigWRP1OrPCROP1
     /tmp/cc9qRquU.s:182    .text.FLASH_OB_WRPConfigWRP1OrPCROP1:00000048 $d
     /tmp/cc9qRquU.s:187    .text.FLASH_OB_WRPConfig:00000000 $t
     /tmp/cc9qRquU.s:191    .text.FLASH_OB_WRPConfig:00000000 FLASH_OB_WRPConfig
     /tmp/cc9qRquU.s:243    .text.FLASH_OB_WRPConfig:00000030 $d
     /tmp/cc9qRquU.s:248    .text.FLASH_OB_RDPConfig:00000000 $t
     /tmp/cc9qRquU.s:252    .text.FLASH_OB_RDPConfig:00000000 FLASH_OB_RDPConfig
     /tmp/cc9qRquU.s:326    .text.FLASH_OB_RDPConfig:00000048 $d
     /tmp/cc9qRquU.s:332    .text.FLASH_OB_UserConfig:00000000 $t
     /tmp/cc9qRquU.s:336    .text.FLASH_OB_UserConfig:00000000 FLASH_OB_UserConfig
     /tmp/cc9qRquU.s:396    .text.FLASH_OB_UserConfig:00000040 $d
     /tmp/cc9qRquU.s:402    .text.FLASH_OB_BORConfig:00000000 $t
     /tmp/cc9qRquU.s:406    .text.FLASH_OB_BORConfig:00000000 FLASH_OB_BORConfig
     /tmp/cc9qRquU.s:463    .text.FLASH_OB_BORConfig:0000003c $d
     /tmp/cc9qRquU.s:469    .text.FLASH_OB_PCROPConfig:00000000 $t
     /tmp/cc9qRquU.s:473    .text.FLASH_OB_PCROPConfig:00000000 FLASH_OB_PCROPConfig
     /tmp/cc9qRquU.s:530    .text.FLASH_OB_PCROPConfig:00000030 $d
     /tmp/cc9qRquU.s:535    .text.FLASH_DATAEEPROM_ProgramWord:00000000 $t
     /tmp/cc9qRquU.s:539    .text.FLASH_DATAEEPROM_ProgramWord:00000000 FLASH_DATAEEPROM_ProgramWord
     /tmp/cc9qRquU.s:581    .text.FLASH_DATAEEPROM_ProgramHalfWord:00000000 $t
     /tmp/cc9qRquU.s:585    .text.FLASH_DATAEEPROM_ProgramHalfWord:00000000 FLASH_DATAEEPROM_ProgramHalfWord
     /tmp/cc9qRquU.s:627    .text.FLASH_DATAEEPROM_ProgramByte:00000000 $t
     /tmp/cc9qRquU.s:631    .text.FLASH_DATAEEPROM_ProgramByte:00000000 FLASH_DATAEEPROM_ProgramByte
     /tmp/cc9qRquU.s:673    .text.FLASH_DATAEEPROM_FastProgramByte:00000000 $t
     /tmp/cc9qRquU.s:677    .text.FLASH_DATAEEPROM_FastProgramByte:00000000 FLASH_DATAEEPROM_FastProgramByte
     /tmp/cc9qRquU.s:724    .text.FLASH_DATAEEPROM_FastProgramByte:0000002c $d
     /tmp/cc9qRquU.s:729    .text.FLASH_DATAEEPROM_FastProgramHalfWord:00000000 $t
     /tmp/cc9qRquU.s:733    .text.FLASH_DATAEEPROM_FastProgramHalfWord:00000000 FLASH_DATAEEPROM_FastProgramHalfWord
     /tmp/cc9qRquU.s:780    .text.FLASH_DATAEEPROM_FastProgramHalfWord:0000002c $d
     /tmp/cc9qRquU.s:785    .text.FLASH_DATAEEPROM_FastProgramWord:00000000 $t
     /tmp/cc9qRquU.s:789    .text.FLASH_DATAEEPROM_FastProgramWord:00000000 FLASH_DATAEEPROM_FastProgramWord
     /tmp/cc9qRquU.s:836    .text.FLASH_DATAEEPROM_FastProgramWord:0000002c $d
     /tmp/cc9qRquU.s:841    .text.HAL_FLASHEx_OBProgram:00000000 $t
     /tmp/cc9qRquU.s:846    .text.HAL_FLASHEx_OBProgram:00000000 HAL_FLASHEx_OBProgram
     /tmp/cc9qRquU.s:988    .text.HAL_FLASHEx_OBProgram:000000a8 $d
     /tmp/cc9qRquU.s:993    .text.HAL_FLASHEx_OBGetConfig:00000000 $t
     /tmp/cc9qRquU.s:998    .text.HAL_FLASHEx_OBGetConfig:00000000 HAL_FLASHEx_OBGetConfig
     /tmp/cc9qRquU.s:1035   .text.HAL_FLASHEx_OBGetConfig:00000024 $d
     /tmp/cc9qRquU.s:1040   .text.HAL_FLASHEx_AdvOBProgram:00000000 $t
     /tmp/cc9qRquU.s:1045   .text.HAL_FLASHEx_AdvOBProgram:00000000 HAL_FLASHEx_AdvOBProgram
     /tmp/cc9qRquU.s:1089   .text.HAL_FLASHEx_AdvOBGetConfig:00000000 $t
     /tmp/cc9qRquU.s:1094   .text.HAL_FLASHEx_AdvOBGetConfig:00000000 HAL_FLASHEx_AdvOBGetConfig
     /tmp/cc9qRquU.s:1135   .text.HAL_FLASHEx_AdvOBGetConfig:00000024 $d
     /tmp/cc9qRquU.s:1140   .text.HAL_FLASHEx_OB_SelectPCROP:00000000 $t
     /tmp/cc9qRquU.s:1145   .text.HAL_FLASHEx_OB_SelectPCROP:00000000 HAL_FLASHEx_OB_SelectPCROP
ARM GAS  /tmp/cc9qRquU.s 			page 88


     /tmp/cc9qRquU.s:1200   .text.HAL_FLASHEx_OB_SelectPCROP:0000003c $d
     /tmp/cc9qRquU.s:1206   .text.HAL_FLASHEx_OB_DeSelectPCROP:00000000 $t
     /tmp/cc9qRquU.s:1211   .text.HAL_FLASHEx_OB_DeSelectPCROP:00000000 HAL_FLASHEx_OB_DeSelectPCROP
     /tmp/cc9qRquU.s:1264   .text.HAL_FLASHEx_OB_DeSelectPCROP:00000038 $d
     /tmp/cc9qRquU.s:1270   .text.HAL_FLASHEx_DATAEEPROM_Unlock:00000000 $t
     /tmp/cc9qRquU.s:1275   .text.HAL_FLASHEx_DATAEEPROM_Unlock:00000000 HAL_FLASHEx_DATAEEPROM_Unlock
     /tmp/cc9qRquU.s:1305   .text.HAL_FLASHEx_DATAEEPROM_Unlock:0000001c $d
     /tmp/cc9qRquU.s:1312   .text.HAL_FLASHEx_DATAEEPROM_Lock:00000000 $t
     /tmp/cc9qRquU.s:1317   .text.HAL_FLASHEx_DATAEEPROM_Lock:00000000 HAL_FLASHEx_DATAEEPROM_Lock
     /tmp/cc9qRquU.s:1335   .text.HAL_FLASHEx_DATAEEPROM_Lock:00000010 $d
     /tmp/cc9qRquU.s:1340   .text.HAL_FLASHEx_DATAEEPROM_Erase:00000000 $t
     /tmp/cc9qRquU.s:1345   .text.HAL_FLASHEx_DATAEEPROM_Erase:00000000 HAL_FLASHEx_DATAEEPROM_Erase
     /tmp/cc9qRquU.s:1408   .text.HAL_FLASHEx_DATAEEPROM_Erase:0000003c $d
     /tmp/cc9qRquU.s:1413   .text.HAL_FLASHEx_DATAEEPROM_Program:00000000 $t
     /tmp/cc9qRquU.s:1418   .text.HAL_FLASHEx_DATAEEPROM_Program:00000000 HAL_FLASHEx_DATAEEPROM_Program
     /tmp/cc9qRquU.s:1567   .text.HAL_FLASHEx_DATAEEPROM_Program:00000098 $d
     /tmp/cc9qRquU.s:1572   .text.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram:00000000 $t
     /tmp/cc9qRquU.s:1577   .text.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram:00000000 HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram
     /tmp/cc9qRquU.s:1593   .text.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram:0000000c $d
     /tmp/cc9qRquU.s:1598   .text.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram:00000000 $t
     /tmp/cc9qRquU.s:1603   .text.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram:00000000 HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram
     /tmp/cc9qRquU.s:1619   .text.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram:0000000c $d
     /tmp/cc9qRquU.s:1624   .text.FLASH_PageErase:00000000 $t
     /tmp/cc9qRquU.s:1629   .text.FLASH_PageErase:00000000 FLASH_PageErase
     /tmp/cc9qRquU.s:1658   .text.FLASH_PageErase:00000020 $d
     /tmp/cc9qRquU.s:1664   .text.HAL_FLASHEx_Erase:00000000 $t
     /tmp/cc9qRquU.s:1669   .text.HAL_FLASHEx_Erase:00000000 HAL_FLASHEx_Erase
     /tmp/cc9qRquU.s:1772   .text.HAL_FLASHEx_Erase:00000070 $d
     /tmp/cc9qRquU.s:1778   .text.HAL_FLASHEx_Erase_IT:00000000 $t
     /tmp/cc9qRquU.s:1783   .text.HAL_FLASHEx_Erase_IT:00000000 HAL_FLASHEx_Erase_IT
     /tmp/cc9qRquU.s:1867   .text.HAL_FLASHEx_Erase_IT:0000005c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
FLASH_WaitForLastOperation
pFlash
