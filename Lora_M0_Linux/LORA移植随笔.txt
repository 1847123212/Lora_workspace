-----2019/10/24-----
从今天开始移植LORA驱动，把这一块搞清楚，才算是真正学习过lora！！

----怎样才能尽快完成目标？？？？---
列出大致步骤，再各个击破！！
大致步骤：
【参照视频、厂家提供的工程】-----------【资料在硬件-外设中，and github文件夹下】
    1》根据原理图整理出来MCU的IO引脚映射表
        这个慌不得，要搞明白！！
        可以完全根据厂家提供的电路图来建立IO映射表，，但是在lora接口那一块，要看视频看看到底是怎么配置相应的GPIO
    -----2019/10/26-----
    目前过了一遍Ant引脚图、L6引脚图，完善了映射表，接下来把剩余没有说明的引脚在排查一遍就可以了。。。
    然后开始找里面不懂的引脚：NC、RXTX_MCU、DIO0～DIO5，等等。。。。。。

    需要sx1278的芯片手册，先按照芯片手册自己配置，然后再看视频修改。。。。

    【外部高速时钟：HSE（High Speed External Clock signal）、内部时钟：HSI(High Speed Internal Clock signal)--相应的有低速：LSE(Low..)、LSI(Low..)
        prescaler：预分频器 】

    总结：查各种资料，完成IO映射表：MCU引脚编号，MCU引脚名称，板子外面显示的名称，功能及配置说明
        技巧：全程围绕MCU来，从引脚找起！！不明白的引脚查清楚！！
            IO映射表做准确很重要！！！

    2》cubeMX根据映射表图形化操作
        需要注意的点：1GPIO功能配置：串口、spi  
                    2时钟树的调整
                    3生成makefile

    总结： 
        步骤：1-根据映射表设置引脚
             2-配置时钟树--根据需要配置相应的频率
             3-配置外设--配置USART、SPI等参数
             4-GPIO引脚配置--配置默认输出，上下拉方式
    -----2019/10/27-----
    目前已经生成makefile代码可以下载执行了
    
    NEXT：移植的第四个视频，一部一部的移植，每一步：知其然知其所以然！！！


    等会回来配置串口调试
    --2019/11/1---串口重定向完成。
------------------------------------------------

    3》调整代码，边调整代码边改makefile

---2019/11/1---
    只需要关心官方固件中的src/platform/sx12xxEiger目录 和 src/radio目录 中的部分文件
    好像还有个platform.h文件？？？？？？？？？？？？？

    主要函数都在sx1276-Hal.c里面！
    
    移植对应到makefile工程：
    1、添加文件，需要在makefile中添加.c资源文件7个：视频中的led.c:sx1278/platform/sx12xxEiger/led.c 没有加
    2、在platform文件中添加：#define PLATFORM SX12xxEiger
    3、根据编译错误，更改两处头文件：stm32l1xx.h
    4、干掉所有usb相关的声明操作：sx12xxEiger.c中
    5、干掉所有初始化的函数，以你为cubeMX已经完成了初始化
    （基本上算是7个文件一个一个的改）
    6、修改时钟来源为HAL_GetTick()  sx1276-Hal.c
    7、自己创建的spi.c文件中添加：
        uint8_t SpiInOut( uint8_t outData )
        {
	        uint8_t pRxData = 0;
	        if(HAL_SPI_TransmitReceive(&hspi1, &outData, &pRxData, 1, 0xffff) != HAL_OK)
	        	return ERROR;
	        else
        		return pRxData;
        }

    ------
    目前已经完成版本号的自检功能。
    
    但是出了点小问题：
        为什么老是提示SX1276ReadDio0 这几个函数声明了没有定义啊？？？？？内联函数的问题？？？
    "inline关键字在GCC参考文档中仅有对其使用在函数定义（Definition）上的描述，而没有提到其是否能用于函数声明（Declare）"
    ---所以在编译的时候inline在声明时添加会报warning，删了就好了
    inline和define的功能类似，在编译的时候直接进行替换！所以函数体要简单。
    C语言标准有哪些？？
        ANSIC（C89、C99、C11。。。。）是由美国国家标准学会制定的标准
        GNU C （GCC）是软件自由基金会制定的标准，（主要应用与Linux开发）
        ISO C则是由国际标准化组织制定的标准，又称标准C
        标准C = ISO C = ANSI C ≠ GNU C
        【GNU C和标准C有一些差别的，暂不追究，出现问题了要想到这一点！！！！】

        【今天两个问题都是出现在这个上面： 1》__write 2》inline】


--------------------------------------暂且存档M0————————————————————————————————————————————————————————————————————-



    4》最终实现，lora的基本通信（单双数互传）

【不要慌，不要含糊！！！每一步都弄清楚，最后写个教程】



-----2019/11/1-----
1、printf串口重定向问题：
    使用gnu编译的时候，printf底层实现已经不是fputc了，是__write：
    int _write (int fd, char *pBuffer, int size)  
    {  
    for (int i = 0; i < size; i++)  
    {  
        while((USART1->SR&0X40)==0);//等待上一次串口数据发送完成  
        USART1->DR = (uint8_t) *pBuffer;       //写DR,串口1将发送数据
    }  
    return size;  
    }
    替换掉原先的fputc即可！！！太强了！！！















